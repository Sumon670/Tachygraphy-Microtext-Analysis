{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c240a7a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:38.954445Z",
     "iopub.status.busy": "2025-03-02T19:15:38.954209Z",
     "iopub.status.idle": "2025-03-02T19:15:39.675660Z",
     "shell.execute_reply": "2025-03-02T19:15:39.674756Z"
    },
    "papermill": {
     "duration": 0.743038,
     "end_time": "2025-03-02T19:15:39.677002",
     "exception": false,
     "start_time": "2025-03-02T19:15:38.933964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-tachygraphy/Tachygraphy_EmotionMoodtags_Dataset.csv\n",
      "/kaggle/input/dataset-tachygraphy/Tachygraphy_MicroText-AIO-V3.xlsx\n",
      "/kaggle/input/dataset-tachygraphy/Tachygraphy_MicroText-AIO-Emotion_Mood_Tags-V3.xlsx\n",
      "/kaggle/input/dataset-tachygraphy/Tachygraphy_dataset_main.csv\n",
      "/kaggle/input/dataset-tachygraphy/Tachygraphy_MicroText-AIO-V2.xlsx\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0f887a1",
   "metadata": {
    "papermill": {
     "duration": 0.018513,
     "end_time": "2025-03-02T19:15:39.715223",
     "exception": false,
     "start_time": "2025-03-02T19:15:39.696710",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DATASET & PREPROCESSING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c0f1be25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:39.753575Z",
     "iopub.status.busy": "2025-03-02T19:15:39.753241Z",
     "iopub.status.idle": "2025-03-02T19:15:40.024254Z",
     "shell.execute_reply": "2025-03-02T19:15:40.023434Z"
    },
    "papermill": {
     "duration": 0.2909,
     "end_time": "2025-03-02T19:15:40.025564",
     "exception": false,
     "start_time": "2025-03-02T19:15:39.734664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'For emoji cleaning'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import emoji\n",
    "from bs4 import BeautifulSoup\n",
    "import os\n",
    "import re\n",
    "import string\n",
    "import json\n",
    "\n",
    "'''For emoji cleaning'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "43bdd1fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:40.062874Z",
     "iopub.status.busy": "2025-03-02T19:15:40.062511Z",
     "iopub.status.idle": "2025-03-02T19:15:41.984429Z",
     "shell.execute_reply": "2025-03-02T19:15:41.983712Z"
    },
    "papermill": {
     "duration": 1.941996,
     "end_time": "2025-03-02T19:15:41.985957",
     "exception": false,
     "start_time": "2025-03-02T19:15:40.043961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset = pd.read_excel('/kaggle/input/dataset-tachygraphy/Tachygraphy_MicroText-AIO-Emotion_Mood_Tags-V3.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ec886601",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:42.029479Z",
     "iopub.status.busy": "2025-03-02T19:15:42.029230Z",
     "iopub.status.idle": "2025-03-02T19:15:42.032364Z",
     "shell.execute_reply": "2025-03-02T19:15:42.031719Z"
    },
    "papermill": {
     "duration": 0.024792,
     "end_time": "2025-03-02T19:15:42.033508",
     "exception": false,
     "start_time": "2025-03-02T19:15:42.008716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "32397dfe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:42.071562Z",
     "iopub.status.busy": "2025-03-02T19:15:42.071350Z",
     "iopub.status.idle": "2025-03-02T19:15:42.089698Z",
     "shell.execute_reply": "2025-03-02T19:15:42.089097Z"
    },
    "papermill": {
     "duration": 0.039037,
     "end_time": "2025-03-02T19:15:42.090827",
     "exception": false,
     "start_time": "2025-03-02T19:15:42.051790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \n",
    "                       \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \n",
    "                       \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \n",
    "                       \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\",\n",
    "                       \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \n",
    "                       \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\n",
    "                       \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\n",
    "                       \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \n",
    "                       \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\",\n",
    "                       \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \n",
    "                       \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\",\n",
    "                       \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\",\n",
    "                       \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\",\n",
    "                       \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\",\n",
    "                       \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\",\n",
    "                       \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \n",
    "                       \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\",\n",
    "                       \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \n",
    "                       \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \n",
    "                       \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\n",
    "                       \"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\",\n",
    "                       \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'u.s':'america', 'e.g':'for example'}\n",
    "\n",
    "punct = [',', '.', '\"', ':', ')', '(', '-', '!', '?', '|', ';', \"'\", '$', '&', '/', '[', ']', '>', '%', '=', '#', '*', '+', '\\\\', '•',  '~', '@', '£', \n",
    " '·', '_', '{', '}', '©', '^', '®', '`',  '<', '→', '°', '€', '™', '›',  '♥', '←', '×', '§', '″', '′', 'Â', '█', '½', 'à', '…', \n",
    " '“', '★', '”', '–', '●', 'â', '►', '−', '¢', '²', '¬', '░', '¶', '↑', '±', '¿', '▾', '═', '¦', '║', '―', '¥', '▓', '—', '‹', '─', \n",
    " '▒', '：', '¼', '⊕', '▼', '▪', '†', '■', '’', '▀', '¨', '▄', '♫', '☆', 'é', '¯', '♦', '¤', '▲', 'è', '¸', '¾', 'Ã', '⋅', '‘', '∞', \n",
    " '∙', '）', '↓', '、', '│', '（', '»', '，', '♪', '╩', '╚', '³', '・', '╦', '╣', '╔', '╗', '▬', '❤', 'ï', 'Ø', '¹', '≤', '‡', '√', ]\n",
    "\n",
    "punct_mapping = {\"‘\": \"'\", \"₹\": \"e\", \"´\": \"'\", \"°\": \"\", \"€\": \"e\", \"™\": \"tm\", \"√\": \" sqrt \", \"×\": \"x\", \"²\": \"2\", \"—\": \"-\", \"–\": \"-\", \"’\": \"'\", \"_\": \"-\",\n",
    "                 \"`\": \"'\", '“': '\"', '”': '\"', '“': '\"', \"£\": \"e\", '∞': 'infinity', 'θ': 'theta', '÷': '/', 'α': 'alpha', '•': '.', 'à': 'a', '−': '-', \n",
    "                 'β': 'beta', '∅': '', '³': '3', 'π': 'pi', '!':' '}\n",
    "\n",
    "mispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater',\n",
    "                'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ',\n",
    "                'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can',\n",
    "                'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', \n",
    "                'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', \n",
    "                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', \n",
    "                'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization',\n",
    "                'demonetisation': 'demonetization'}\n",
    "\n",
    "def clean_text(text):\n",
    "    '''Clean emoji, Make text lowercase, remove text in square brackets,remove links,remove punctuation\n",
    "    and remove words containing numbers.'''\n",
    "#     text = emoji.demojize(text)\n",
    "#     text = re.sub(r'\\:(.*?)\\:','',text)\n",
    "#     text = str(text).lower()    #Making Text Lowercase\n",
    "#     text = re.sub('\\[.*?\\]', '', text)\n",
    "    #The next 2 lines remove html text\n",
    "    text = BeautifulSoup(text, 'lxml').get_text()\n",
    "    text = re.sub('https?://\\S+|www\\.\\S+', '', text)\n",
    "    text = re.sub('<.*?>+', '', text)\n",
    "    text = re.sub('\\n', '', text)\n",
    "#     text = re.sub('\\w*\\d\\w*', '', text)\n",
    "    # replacing everything with space except (a-z, A-Z, 0-9, \"%\", \".\", \"&\", \",\", \"'\", \"?\", \"!\", \",\", \"'\", \";\", \"-\")\n",
    "    text = re.sub(r\"[^a-zA-Z0-9?.!,¿'%&,';-]+\", \" \", text)\n",
    "    return text\n",
    "\n",
    "def clean_contractions(text, mapping):\n",
    "    '''Clean contraction using contraction mapping'''    \n",
    "    specials = [\"’\", \"‘\", \"´\", \"`\"]\n",
    "    for s in specials:\n",
    "        text = text.replace(s, \"'\")\n",
    "    for word in mapping.keys():\n",
    "        if \"\"+word+\"\" in text:\n",
    "            text = text.replace(\"\"+word+\"\", \"\"+mapping[word]+\"\")\n",
    "    #Remove Punctuations\n",
    "    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n",
    "    # creating a space between a word and the punctuation following it\n",
    "    # eg: \"he is a boy.\" => \"he is a boy .\"\n",
    "    text = re.sub(r\"([?.!,¿])\", r\" \\1 \", text)\n",
    "    text = re.sub(r'[\" \"]+', \" \", text)\n",
    "    return text\n",
    "\n",
    "def clean_special_chars(text, punct, mapping):\n",
    "    '''Cleans special characters present(if any)'''   \n",
    "    for p in mapping:\n",
    "        text = text.replace(p, mapping[p])\n",
    "    \n",
    "    for p in punct:\n",
    "        text = text.replace(p, f' {p} ')\n",
    "    \n",
    "    specials = {'\\u200b': ' ', '…': ' ... ', '\\ufeff': '', 'करना': '', 'है': ''}  \n",
    "    for s in specials:\n",
    "        text = text.replace(s, specials[s])\n",
    "    \n",
    "    return text\n",
    "\n",
    "def correct_spelling(x, dic):\n",
    "    '''Corrects common spelling errors'''   \n",
    "    for word in dic.keys():\n",
    "        x = x.replace(word, dic[word])\n",
    "    return x\n",
    "\n",
    "def remove_space(text):\n",
    "    '''Removes awkward spaces'''   \n",
    "    #Removes awkward spaces \n",
    "    text = text.strip()\n",
    "    text = text.split()\n",
    "    return \" \".join(text)\n",
    "\n",
    "def text_preprocessing_pipeline(text):\n",
    "    '''Cleaning and parsing the text.'''\n",
    "#     text = clean_contractions(text, contraction_mapping)\n",
    "    text = clean_text(text)\n",
    "#     text = clean_contractions(text, contraction_mapping)\n",
    "#     text = clean_special_chars(text, punct, punct_mapping)\n",
    "#     text = correct_spelling(text, mispell_dict)\n",
    "    text = remove_space(text)\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "67926143",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:42.127493Z",
     "iopub.status.busy": "2025-03-02T19:15:42.127301Z",
     "iopub.status.idle": "2025-03-02T19:15:42.135563Z",
     "shell.execute_reply": "2025-03-02T19:15:42.134806Z"
    },
    "papermill": {
     "duration": 0.027635,
     "end_time": "2025-03-02T19:15:42.136719",
     "exception": false,
     "start_time": "2025-03-02T19:15:42.109084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                           omg, JEE prep is killing me rn\n",
       "1                         u up 4 a break b4 UPSC revision?\n",
       "2                              ttyl, finishing da CAT mock\n",
       "3                        nah, dat GATE paper was brutal af\n",
       "4                        sup? u done w/ ur IIT assignment?\n",
       "                               ...                        \n",
       "10275          bruh, UP’s power cuts, no relief in sight 🔌\n",
       "10276    wtf, new tax laws hitting hard, prices gonna j...\n",
       "10277    yo, Adani’s stock falling, more issues surfaci...\n",
       "10278      bruh, tech IPOs doing well, investors excited 📉\n",
       "10279    wtf, Delhi’s AQI at record highs, air quality ...\n",
       "Name: Informal Text, Length: 10280, dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Informal Text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3738f5a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:42.174769Z",
     "iopub.status.busy": "2025-03-02T19:15:42.174576Z",
     "iopub.status.idle": "2025-03-02T19:15:42.184713Z",
     "shell.execute_reply": "2025-03-02T19:15:42.183999Z"
    },
    "papermill": {
     "duration": 0.030182,
     "end_time": "2025-03-02T19:15:42.185990",
     "exception": false,
     "start_time": "2025-03-02T19:15:42.155808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emotion_columns = ['anger', 'disgust', 'fear', 'joy', 'neutral', 'sadness', 'surprise']\n",
    "df[emotion_columns] = df[emotion_columns].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c52e2aed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:42.223164Z",
     "iopub.status.busy": "2025-03-02T19:15:42.222971Z",
     "iopub.status.idle": "2025-03-02T19:15:42.226632Z",
     "shell.execute_reply": "2025-03-02T19:15:42.226027Z"
    },
    "papermill": {
     "duration": 0.023484,
     "end_time": "2025-03-02T19:15:42.227682",
     "exception": false,
     "start_time": "2025-03-02T19:15:42.204198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Informal Text'] = df['Informal Text'].astype(str)\n",
    "# df['anger'] = df['anger'].astype(float)\n",
    "# df['disgust'] = df['disgust'].astype(float)\n",
    "# df['fear'] = df['fear'].astype(float)\n",
    "# df['joy'] = df['joy'].astype(float)\n",
    "# df['neutral'] = df['neutral'].astype(float)\n",
    "# df['sadness'] = df['sadness'].astype(float)\n",
    "# df['surprise'] = df['surprise'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f484ff88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:42.264579Z",
     "iopub.status.busy": "2025-03-02T19:15:42.264374Z",
     "iopub.status.idle": "2025-03-02T19:15:43.828680Z",
     "shell.execute_reply": "2025-03-02T19:15:43.828008Z"
    },
    "papermill": {
     "duration": 1.584203,
     "end_time": "2025-03-02T19:15:43.830272",
     "exception": false,
     "start_time": "2025-03-02T19:15:42.246069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-93bb6d8e489f>:51: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n",
      "  text = BeautifulSoup(text, 'lxml').get_text()\n"
     ]
    }
   ],
   "source": [
    "df['Informal Text'] = df['Informal Text'].apply(lambda x: text_preprocessing_pipeline(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "91abb3ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:43.868475Z",
     "iopub.status.busy": "2025-03-02T19:15:43.868200Z",
     "iopub.status.idle": "2025-03-02T19:15:43.874035Z",
     "shell.execute_reply": "2025-03-02T19:15:43.873243Z"
    },
    "papermill": {
     "duration": 0.025945,
     "end_time": "2025-03-02T19:15:43.875355",
     "exception": false,
     "start_time": "2025-03-02T19:15:43.849410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                           omg, JEE prep is killing me rn\n",
       "1                         u up 4 a break b4 UPSC revision?\n",
       "2                              ttyl, finishing da CAT mock\n",
       "3                        nah, dat GATE paper was brutal af\n",
       "4                         sup? u done w ur IIT assignment?\n",
       "                               ...                        \n",
       "10275            bruh, UP s power cuts, no relief in sight\n",
       "10276    wtf, new tax laws hitting hard, prices gonna jump\n",
       "10277     yo, Adani s stock falling, more issues surfacing\n",
       "10278        bruh, tech IPOs doing well, investors excited\n",
       "10279    wtf, Delhi s AQI at record highs, air quality ...\n",
       "Name: Informal Text, Length: 10280, dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Informal Text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e82aca81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:43.912624Z",
     "iopub.status.busy": "2025-03-02T19:15:43.912429Z",
     "iopub.status.idle": "2025-03-02T19:15:43.917576Z",
     "shell.execute_reply": "2025-03-02T19:15:43.917012Z"
    },
    "papermill": {
     "duration": 0.025074,
     "end_time": "2025-03-02T19:15:43.918612",
     "exception": false,
     "start_time": "2025-03-02T19:15:43.893538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(columns=['Expanded Meaning', 'pred', 'label', 'score'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bacd248c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:43.955917Z",
     "iopub.status.busy": "2025-03-02T19:15:43.955685Z",
     "iopub.status.idle": "2025-03-02T19:15:43.958574Z",
     "shell.execute_reply": "2025-03-02T19:15:43.958018Z"
    },
    "papermill": {
     "duration": 0.022778,
     "end_time": "2025-03-02T19:15:43.959758",
     "exception": false,
     "start_time": "2025-03-02T19:15:43.936980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emotion_label_mapping = {\n",
    "    0: \"anger\", 1: \"disgust\", 2: \"fear\", 3: \"joy\", 4: \"neutral\",\n",
    "    5: \"sadness\", 6: \"surprise\"\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dea9c957",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:43.996687Z",
     "iopub.status.busy": "2025-03-02T19:15:43.996482Z",
     "iopub.status.idle": "2025-03-02T19:15:43.999372Z",
     "shell.execute_reply": "2025-03-02T19:15:43.998798Z"
    },
    "papermill": {
     "duration": 0.022565,
     "end_time": "2025-03-02T19:15:44.000574",
     "exception": false,
     "start_time": "2025-03-02T19:15:43.978009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "EMOTION_LABELS = [\n",
    "    \"anger\", \"disgust\", \"fear\", \"joy\", \"neutral\",\n",
    "    \"sadness\", \"surprise\"\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d882e4cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:44.043935Z",
     "iopub.status.busy": "2025-03-02T19:15:44.043628Z",
     "iopub.status.idle": "2025-03-02T19:15:44.047553Z",
     "shell.execute_reply": "2025-03-02T19:15:44.046639Z"
    },
    "papermill": {
     "duration": 0.029843,
     "end_time": "2025-03-02T19:15:44.048752",
     "exception": false,
     "start_time": "2025-03-02T19:15:44.018909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test_train_split(dataset, test_ratio=0.1):\n",
    "  test_indices = np.random.rand(len(dataset)) < test_ratio\n",
    "  return dataset[~test_indices], dataset[test_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7c31920d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:44.092603Z",
     "iopub.status.busy": "2025-03-02T19:15:44.092409Z",
     "iopub.status.idle": "2025-03-02T19:15:44.099661Z",
     "shell.execute_reply": "2025-03-02T19:15:44.098949Z"
    },
    "papermill": {
     "duration": 0.027192,
     "end_time": "2025-03-02T19:15:44.100985",
     "exception": false,
     "start_time": "2025-03-02T19:15:44.073793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9258 examples in training, 1022 examples in testing.\n"
     ]
    }
   ],
   "source": [
    "train_ds_pd, validation_ds_pd = test_train_split(df)\n",
    "print(\"{} examples in training, {} examples in testing.\".format(\n",
    "    len(train_ds_pd), len(validation_ds_pd)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "213f5289",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:44.175175Z",
     "iopub.status.busy": "2025-03-02T19:15:44.174927Z",
     "iopub.status.idle": "2025-03-02T19:15:44.179534Z",
     "shell.execute_reply": "2025-03-02T19:15:44.178916Z"
    },
    "papermill": {
     "duration": 0.025476,
     "end_time": "2025-03-02T19:15:44.180708",
     "exception": false,
     "start_time": "2025-03-02T19:15:44.155232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_ds_pd = df\n",
    "train_ds_pd = train_ds_pd.reset_index(drop=True)\n",
    "validation_ds_pd = validation_ds_pd.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3dfe800e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:44.217927Z",
     "iopub.status.busy": "2025-03-02T19:15:44.217705Z",
     "iopub.status.idle": "2025-03-02T19:15:47.625446Z",
     "shell.execute_reply": "2025-03-02T19:15:47.624383Z"
    },
    "papermill": {
     "duration": 3.428339,
     "end_time": "2025-03-02T19:15:47.627272",
     "exception": false,
     "start_time": "2025-03-02T19:15:44.198933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn\n",
    "import torch.nn as nn"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c50db679",
   "metadata": {
    "papermill": {
     "duration": 0.018103,
     "end_time": "2025-03-02T19:15:47.664677",
     "exception": false,
     "start_time": "2025-03-02T19:15:47.646574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### SETTING CUDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fbd7a75a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:47.702377Z",
     "iopub.status.busy": "2025-03-02T19:15:47.701948Z",
     "iopub.status.idle": "2025-03-02T19:15:47.776127Z",
     "shell.execute_reply": "2025-03-02T19:15:47.775201Z"
    },
    "papermill": {
     "duration": 0.09443,
     "end_time": "2025-03-02T19:15:47.777412",
     "exception": false,
     "start_time": "2025-03-02T19:15:47.682982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1a8d1b96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:47.815281Z",
     "iopub.status.busy": "2025-03-02T19:15:47.815025Z",
     "iopub.status.idle": "2025-03-02T19:15:47.818535Z",
     "shell.execute_reply": "2025-03-02T19:15:47.817725Z"
    },
    "papermill": {
     "duration": 0.023536,
     "end_time": "2025-03-02T19:15:47.819744",
     "exception": false,
     "start_time": "2025-03-02T19:15:47.796208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a3cb1a2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:15:47.857169Z",
     "iopub.status.busy": "2025-03-02T19:15:47.856953Z",
     "iopub.status.idle": "2025-03-02T19:16:06.246233Z",
     "shell.execute_reply": "2025-03-02T19:16:06.245552Z"
    },
    "papermill": {
     "duration": 18.409399,
     "end_time": "2025-03-02T19:16:06.247675",
     "exception": false,
     "start_time": "2025-03-02T19:15:47.838276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from transformers import RobertaTokenizer, RobertaModel\n",
    "from transformers import DebertaV2Model, DebertaV2Tokenizer\n",
    "from torch.utils.data import Dataset, DataLoader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5387a33b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:06.286167Z",
     "iopub.status.busy": "2025-03-02T19:16:06.285656Z",
     "iopub.status.idle": "2025-03-02T19:16:09.954005Z",
     "shell.execute_reply": "2025-03-02T19:16:09.953184Z"
    },
    "papermill": {
     "duration": 3.688766,
     "end_time": "2025-03-02T19:16:09.955562",
     "exception": false,
     "start_time": "2025-03-02T19:16:06.266796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "52aeeb447f4b45ce94709544db329d52",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/52.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f397b2dbc1d041c4805a82d61506edf1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "spm.model:   0%|          | 0.00/2.46M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e55a891e3b0047aeb87b6e902df9e4ab",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/579 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "tokenizer = DebertaV2Tokenizer.from_pretrained('microsoft/deberta-v3-base')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "acdedddd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:09.995511Z",
     "iopub.status.busy": "2025-03-02T19:16:09.995252Z",
     "iopub.status.idle": "2025-03-02T19:16:09.998208Z",
     "shell.execute_reply": "2025-03-02T19:16:09.997562Z"
    },
    "papermill": {
     "duration": 0.023897,
     "end_time": "2025-03-02T19:16:09.999438",
     "exception": false,
     "start_time": "2025-03-02T19:16:09.975541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip install optuna"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "846984dc",
   "metadata": {
    "papermill": {
     "duration": 0.018848,
     "end_time": "2025-03-02T19:16:10.036949",
     "exception": false,
     "start_time": "2025-03-02T19:16:10.018101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## TORCH IMPORTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2c609fbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:10.075153Z",
     "iopub.status.busy": "2025-03-02T19:16:10.074923Z",
     "iopub.status.idle": "2025-03-02T19:16:13.084184Z",
     "shell.execute_reply": "2025-03-02T19:16:13.083480Z"
    },
    "papermill": {
     "duration": 3.029933,
     "end_time": "2025-03-02T19:16:13.085639",
     "exception": false,
     "start_time": "2025-03-02T19:16:10.055706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.optim import AdamW\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from transformers import RobertaTokenizer, RobertaModel\n",
    "from sklearn.model_selection import train_test_split\n",
    "import optuna\n",
    "# from optuna.integration import PyTorchLightningPruner\n",
    "from ray import tune\n",
    "import ray\n",
    "from ray import tune\n",
    "from ray.tune import CLIReporter\n",
    "from ray.tune import CLIReporter\n",
    "from ray.tune.schedulers import ASHAScheduler\n",
    "from ray.tune.schedulers import ASHAScheduler\n",
    "# from ray.tune.integration.pytorch import TuneReportCallback\n",
    "from torch.amp import GradScaler, autocast\n",
    "# from ray.tune.integration.optuna import OptunaSearch\n",
    "from ray.tune.search.optuna import OptunaSearch\n",
    "from ray import tune\n",
    "from ray.tune.search.hyperopt import HyperOptSearch\n",
    "from torch import autocast\n",
    "# from ray import tune\n",
    "# from ray.tune.integration.tensorboard import TensorBoardReporter\n",
    "from ray.tune.logger import TBXLogger\n",
    "from torch.utils.tensorboard import SummaryWriter\n",
    "from ray.train import report\n",
    "# from ray.tune.integration.jupyter import JupyterNotebookReporter\n",
    "from ray.tune import JupyterNotebookReporter\n",
    "# from torch.cuda.amp import GradScaler, autocast\n",
    "from torch.optim.lr_scheduler import StepLR, CosineAnnealingLR\n",
    "from ray.tune.schedulers import HyperBandScheduler, AsyncHyperBandScheduler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bcbe4cb",
   "metadata": {
    "papermill": {
     "duration": 0.018421,
     "end_time": "2025-03-02T19:16:13.123764",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.105343",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DATASET CONFIG & ENCODING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "66e23649",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.162958Z",
     "iopub.status.busy": "2025-03-02T19:16:13.162259Z",
     "iopub.status.idle": "2025-03-02T19:16:13.168085Z",
     "shell.execute_reply": "2025-03-02T19:16:13.167435Z"
    },
    "papermill": {
     "duration": 0.026387,
     "end_time": "2025-03-02T19:16:13.169310",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.142923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class EmotionDataset(Dataset):\n",
    "    def __init__(self, dataframe, tokenizer, max_len = 2048):\n",
    "        self.tokenizer = tokenizer\n",
    "        self.data = dataframe\n",
    "        self.max_len = max_len\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "#         text = self.data.iloc[index, 0]\n",
    "#         labels = self.data.iloc[index, 1:].values.astype(float)\n",
    "        text = str(self.data.iloc[index]['Informal Text'])\n",
    "        labels = self.data.iloc[index][['anger', 'disgust', 'fear', 'joy', 'neutral', 'sadness', 'surprise']].values.astype(np.float32)\n",
    "\n",
    "        inputs = self.tokenizer.encode_plus(\n",
    "            text,\n",
    "            None,\n",
    "            add_special_tokens=True,\n",
    "            padding=False,\n",
    "            truncation=True,\n",
    "            return_token_type_ids=False\n",
    "        )\n",
    "\n",
    "        input_ids = inputs['input_ids']\n",
    "        attention_mask = inputs['attention_mask']\n",
    "\n",
    "        return {\n",
    "            'input_ids': torch.tensor(input_ids, dtype=torch.long),\n",
    "            'attention_mask': torch.tensor(attention_mask, dtype=torch.long),\n",
    "            'labels': torch.tensor(labels, dtype=torch.float)\n",
    "        }"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fff454d9",
   "metadata": {
    "papermill": {
     "duration": 0.018699,
     "end_time": "2025-03-02T19:16:13.207135",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.188436",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MODEL DEFINITION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d8999f75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.245427Z",
     "iopub.status.busy": "2025-03-02T19:16:13.245206Z",
     "iopub.status.idle": "2025-03-02T19:16:13.250535Z",
     "shell.execute_reply": "2025-03-02T19:16:13.249873Z"
    },
    "papermill": {
     "duration": 0.025825,
     "end_time": "2025-03-02T19:16:13.251648",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.225823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "class EmotionModel(nn.Module):\n",
    "    def __init__(self, roberta_model, n_classes, dropout_rate):\n",
    "        super(EmotionModel, self).__init__()\n",
    "        self.roberta = roberta_model\n",
    "        self.drop = nn.Dropout(p=dropout_rate)\n",
    "        self.fc1 = nn.Linear(self.roberta.config.hidden_size, 512)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.fc2 = nn.Linear(512, 256)\n",
    "        self.out = nn.Linear(256, n_classes)\n",
    "\n",
    "    def forward(self, input_ids, attention_mask):\n",
    "        output = self.roberta(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#         hidden_states = output.last_hidden_state\n",
    "        \n",
    "        # Extract the [CLS] token representation (first token in the sequence)\n",
    "        cls_token_state = output.last_hidden_state[:, 0, :]\n",
    "        output = self.drop(cls_token_state)\n",
    "        output = self.relu(self.fc1(output))\n",
    "        output = self.drop(output)\n",
    "        output = self.relu(self.fc2(output))\n",
    "#         output = self.drop(output)\n",
    "        return self.out(output)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b8e1126",
   "metadata": {
    "papermill": {
     "duration": 0.018545,
     "end_time": "2025-03-02T19:16:13.289278",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.270733",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Other Models to try out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c0de98f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.331110Z",
     "iopub.status.busy": "2025-03-02T19:16:13.330750Z",
     "iopub.status.idle": "2025-03-02T19:16:13.334670Z",
     "shell.execute_reply": "2025-03-02T19:16:13.333654Z"
    },
    "papermill": {
     "duration": 0.027292,
     "end_time": "2025-03-02T19:16:13.335776",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.308484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class EmotionModel(nn.Module):\n",
    "#     def __init__(self, roberta_model, n_classes, dropout_rate):\n",
    "#         super(EmotionModel, self).__init__()\n",
    "#         self.roberta = roberta_model\n",
    "#         self.drop = nn.Dropout(p=dropout_rate)\n",
    "#         self.out = nn.Linear(self.roberta.config.hidden_size, n_classes)\n",
    "\n",
    "#     def forward(self, input_ids, attention_mask):\n",
    "#         output = self.roberta(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#         output = self.drop(output.pooler_output)\n",
    "#         return self.out(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a606a7be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.374534Z",
     "iopub.status.busy": "2025-03-02T19:16:13.374330Z",
     "iopub.status.idle": "2025-03-02T19:16:13.377150Z",
     "shell.execute_reply": "2025-03-02T19:16:13.376575Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023379,
     "end_time": "2025-03-02T19:16:13.378351",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.354972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class EmotionModel(nn.Module):\n",
    "#     def __init__(self, roberta_model, n_classes, dropout_rate):\n",
    "#         super(EmotionModel, self).__init__()\n",
    "#         self.roberta = roberta_model\n",
    "#         self.drop = nn.Dropout(p=dropout_rate)\n",
    "#         self.fc1 = nn.Linear(self.roberta.config.hidden_size, 512)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(512, 256)\n",
    "#         self.out = nn.Linear(256, n_classes)\n",
    "\n",
    "#     def forward(self, input_ids, attention_mask):\n",
    "#         # Get the RoBERTa output\n",
    "#         output = self.roberta(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#         # Use the pooled output for classification tasks\n",
    "#         pooled_output = output.pooler_output\n",
    "#         # Pass through the custom layers\n",
    "#         output = self.drop(pooled_output)\n",
    "#         output = self.relu(self.fc1(output))\n",
    "#         output = self.drop(output)\n",
    "#         output = self.relu(self.fc2(output))\n",
    "#         output = self.drop(output)\n",
    "#         return self.out(output)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "50982f00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.416354Z",
     "iopub.status.busy": "2025-03-02T19:16:13.416152Z",
     "iopub.status.idle": "2025-03-02T19:16:13.419331Z",
     "shell.execute_reply": "2025-03-02T19:16:13.418522Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023378,
     "end_time": "2025-03-02T19:16:13.420545",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.397167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class EmotionModel(nn.Module):\n",
    "#     def __init__(self, roberta_model, n_classes, dropout_rate, hidden_size):\n",
    "#         super(EmotionModel, self).__init__()\n",
    "#         self.roberta = roberta_model\n",
    "#         self.drop = nn.Dropout(p=dropout_rate)\n",
    "#         self.fc1 = nn.Linear(self.roberta.config.hidden_size, hidden_size)\n",
    "#         self.relu = nn.ReLU()\n",
    "#         self.fc2 = nn.Linear(hidden_size, hidden_size // 2)\n",
    "#         self.out = nn.Linear(hidden_size // 2, n_classes)\n",
    "\n",
    "#     def forward(self, input_ids, attention_mask):\n",
    "#         # Get the RoBERTa output\n",
    "#         output = self.roberta(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#         # Use the pooled output for classification tasks\n",
    "#         pooled_output = output.pooler_output\n",
    "#         # Pass through the custom layers\n",
    "#         output = self.drop(pooled_output)\n",
    "#         output = self.relu(self.fc1(output))\n",
    "#         output = self.drop(output)\n",
    "#         output = self.relu(self.fc2(output))\n",
    "#         output = self.drop(output)\n",
    "#         return self.out(output)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4ed5ccc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.476816Z",
     "iopub.status.busy": "2025-03-02T19:16:13.476576Z",
     "iopub.status.idle": "2025-03-02T19:16:13.480101Z",
     "shell.execute_reply": "2025-03-02T19:16:13.479287Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.035539,
     "end_time": "2025-03-02T19:16:13.481489",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.445950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class RoBERTaEmotionModel(nn.Module):\n",
    "#     def __init__(self, roberta_model_name, num_emotions=7):\n",
    "#         super(RoBERTaEmotionModel, self).__init__()\n",
    "#         self.roberta = RobertaModel.from_pretrained(roberta_model_name)\n",
    "#         self.drop = nn.Dropout(p=0.3)\n",
    "#         self.out = nn.Linear(self.roberta.config.hidden_size, num_emotions)\n",
    "\n",
    "#     def forward(self, input_ids, attention_mask):\n",
    "#         outputs = self.roberta(\n",
    "#             input_ids=input_ids,\n",
    "#             attention_mask=attention_mask\n",
    "#         )\n",
    "#         pooled_output = outputs[1]  # CLS token\n",
    "#         output = self.drop(pooled_output)\n",
    "#         return self.out(output)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adb17c28",
   "metadata": {
    "papermill": {
     "duration": 0.019166,
     "end_time": "2025-03-02T19:16:13.526519",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.507353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TRAIN & VALIDATION \n",
    "### OLD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "40344961",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.564296Z",
     "iopub.status.busy": "2025-03-02T19:16:13.564047Z",
     "iopub.status.idle": "2025-03-02T19:16:13.567101Z",
     "shell.execute_reply": "2025-03-02T19:16:13.566470Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023449,
     "end_time": "2025-03-02T19:16:13.568318",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.544869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def train_model(model, train_loader, val_loader, loss_fn, optimizer, device, scheduler, scaler, n_epochs):\n",
    "#     for epoch in range(n_epochs):\n",
    "#         model.train()\n",
    "#         train_loss = 0\n",
    "#         correct = 0\n",
    "#         total = 0\n",
    "\n",
    "#         for data in train_loader:\n",
    "#             input_ids = data['input_ids'].to(device)\n",
    "#             attention_mask = data['attention_mask'].to(device)\n",
    "#             labels = data['labels'].to(device)\n",
    "\n",
    "#             optimizer.zero_grad()\n",
    "#             with autocast(device_type=device.type):\n",
    "#                 outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#                 loss = loss_fn(outputs, labels)\n",
    "\n",
    "#             scaler.scale(loss).backward()\n",
    "#             scaler.step(optimizer)\n",
    "#             scaler.update()\n",
    "#             if scheduler:\n",
    "#                 scheduler.step()\n",
    "\n",
    "#             train_loss += loss.item()\n",
    "#             _, predicted = torch.max(outputs, 1)\n",
    "#             total += labels.size(0)\n",
    "#             correct += (predicted == torch.argmax(labels, dim=1)).sum().item()\n",
    "\n",
    "#         train_accuracy = correct / total\n",
    "#         val_loss, val_accuracy = eval_model(model, val_loader, loss_fn, device)\n",
    "\n",
    "#         print(f'Epoch {epoch+1}/{n_epochs}, Train Loss: {train_loss/len(train_loader):.4f}, Train Accuracy: {train_accuracy:.4f}, Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "63110c08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.606434Z",
     "iopub.status.busy": "2025-03-02T19:16:13.606200Z",
     "iopub.status.idle": "2025-03-02T19:16:13.609002Z",
     "shell.execute_reply": "2025-03-02T19:16:13.608384Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023255,
     "end_time": "2025-03-02T19:16:13.610248",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.586993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def eval_model(model, val_loader, loss_fn, device):\n",
    "#     model.eval()\n",
    "#     val_loss = 0\n",
    "#     correct = 0\n",
    "#     total = 0\n",
    "\n",
    "#     with torch.no_grad():\n",
    "#         for data in val_loader:\n",
    "#             input_ids = data['input_ids'].to(device)\n",
    "#             attention_mask = data['attention_mask'].to(device)\n",
    "#             labels = data['labels'].to(device)\n",
    "\n",
    "#             outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#             loss = loss_fn(outputs, labels)\n",
    "#             val_loss += loss.item()\n",
    "\n",
    "#             _, predicted = torch.max(outputs, 1)\n",
    "#             total += labels.size(0)\n",
    "#             correct += (predicted == torch.argmax(labels, dim=1)).sum().item()\n",
    "\n",
    "#     val_accuracy = correct / total\n",
    "#     return val_loss / len(val_loader), val_accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3f7b8d8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.648484Z",
     "iopub.status.busy": "2025-03-02T19:16:13.648256Z",
     "iopub.status.idle": "2025-03-02T19:16:13.651550Z",
     "shell.execute_reply": "2025-03-02T19:16:13.650751Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023722,
     "end_time": "2025-03-02T19:16:13.652968",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.629246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def objective(trial):\n",
    "#     hidden_size = trial.suggest_int('hidden_size', 64, 256)\n",
    "#     dropout_rate = trial.suggest_uniform('dropout_rate', 0.1, 0.5)\n",
    "#     batch_size = trial.suggest_categorical('batch_size', [2, 4, 8, 16])\n",
    "#     learning_rate = trial.suggest_loguniform('lr', 1e-5, 1e-1)\n",
    "#     epochs = 5  # Adjust as needed\n",
    "\n",
    "#     tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "    \n",
    "#     # Load your data here\n",
    "# #     data = df  # Replace with your data loading logic\n",
    "# #     train_texts, val_texts, train_labels, val_labels = train_test_split(\n",
    "# #         data.iloc[:, 0],  # Assuming text is in the first column\n",
    "# #         data.iloc[:, 1:],  # Labels are in the remaining columns\n",
    "# #         test_size=0.2\n",
    "# #     )\n",
    "\n",
    "\n",
    "# #     train_dataset = EmotionDataset(pd.DataFrame({'text': train_texts, **pd.DataFrame(train_labels)}), tokenizer, max_len=128)\n",
    "# #     val_dataset = EmotionDataset(pd.DataFrame({'text': val_texts, **pd.DataFrame(val_labels)}), tokenizer, max_len=128)\n",
    "    \n",
    "    \n",
    "#     train_dataset = EmotionDataset(train_ds_pd, tokenizer, max_len=128)\n",
    "#     val_dataset = EmotionDataset(validation_ds_pd, tokenizer, max_len=128)\n",
    "\n",
    "#     train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "#     val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "#     model = EmotionClassifier(hidden_size=hidden_size, dropout_rate=dropout_rate).to(device)\n",
    "#     loss_fn = nn.BCEWithLogitsLoss()\n",
    "#     optimizer = optim.AdamW(model.parameters(), lr=learning_rate)\n",
    "#     scheduler = optim.lr_scheduler.OneCycleLR(optimizer, max_lr=learning_rate, steps_per_epoch=len(train_loader), epochs=epochs)\n",
    "#     scaler = GradScaler()\n",
    "\n",
    "#     train_model(model, train_loader, val_loader, loss_fn, optimizer, device, scheduler, scaler, epochs)\n",
    "#     val_loss, val_accuracy = eval_model(model, val_loader, loss_fn, device)\n",
    "    \n",
    "#     return val_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f2493897",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.691145Z",
     "iopub.status.busy": "2025-03-02T19:16:13.690904Z",
     "iopub.status.idle": "2025-03-02T19:16:13.694283Z",
     "shell.execute_reply": "2025-03-02T19:16:13.693485Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023976,
     "end_time": "2025-03-02T19:16:13.695598",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.671622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def train_fn(config):\n",
    "#     try:\n",
    "#         hidden_size = config['hidden_size']\n",
    "#         dropout_rate = config['dropout_rate']\n",
    "#         batch_size = config['batch_size']\n",
    "#         learning_rate = config['lr']\n",
    "#         epochs = 5\n",
    "\n",
    "#         tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "\n",
    "#         # Load your data here\n",
    "# #         data = pd.read_csv('path_to_your_data.csv')  # Replace with your data loading logic\n",
    "# #         train_texts, val_texts, train_labels, val_labels = train_test_split(\n",
    "# #             data.iloc[:, 0],  # Assuming text is in the first column\n",
    "# #             data.iloc[:, 1:],  # Labels are in the remaining columns\n",
    "# #             test_size=0.2\n",
    "# #         )\n",
    "\n",
    "#         train_dataset = EmotionDataset(train_ds_pd, tokenizer, max_len=128)\n",
    "#         val_dataset = EmotionDataset(validation_ds_pd, tokenizer, max_len=128)\n",
    "\n",
    "#         train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "#         val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "#         model = EmotionClassifier(hidden_size=hidden_size, dropout_rate=dropout_rate).to(device)\n",
    "#         loss_fn = nn.BCEWithLogitsLoss()\n",
    "#         optimizer = optim.AdamW(model.parameters(), lr=learning_rate)\n",
    "#         scheduler = optim.lr_scheduler.OneCycleLR(optimizer, max_lr=learning_rate, steps_per_epoch=len(train_loader), epochs=epochs)\n",
    "#         scaler = GradScaler()\n",
    "\n",
    "#         for epoch in range(epochs):\n",
    "#             train_model(model, train_loader, val_loader, loss_fn, optimizer, device, scheduler, scaler, epochs)\n",
    "#             val_loss, val_accuracy = eval_model(model, val_loader, loss_fn, device)\n",
    "#             tune.report(loss=val_loss, accuracy=val_accuracy)\n",
    "    \n",
    "#     except Exception as e:\n",
    "#         print(f\"An error occurred: {e}\")\n",
    "#         raise\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "adcfddff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.734098Z",
     "iopub.status.busy": "2025-03-02T19:16:13.733882Z",
     "iopub.status.idle": "2025-03-02T19:16:13.736992Z",
     "shell.execute_reply": "2025-03-02T19:16:13.736178Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023925,
     "end_time": "2025-03-02T19:16:13.738300",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.714375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def tune_model(config):\n",
    "#     tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "#     train_df, val_df = train_test_split(df, test_size=0.2)\n",
    "\n",
    "#     train_dataset = EmotionDataset(train_df, tokenizer, config['max_len'])\n",
    "#     val_dataset = EmotionDataset(val_df, tokenizer, config['max_len'])\n",
    "\n",
    "#     train_loader = DataLoader(train_dataset, batch_size=config['batch_size'], shuffle=True)\n",
    "#     val_loader = DataLoader(val_dataset, batch_size=config['batch_size'])\n",
    "\n",
    "#     device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "#     model = RoBERTaEmotionModel('roberta-base').to(device)\n",
    "\n",
    "#     optimizer = optim.AdamW(model.parameters(), lr=config['lr'])\n",
    "#     loss_fn = nn.MSELoss().to(device)\n",
    "#     scaler = GradScaler()\n",
    "\n",
    "#     scheduler = optim.lr_scheduler.OneCycleLR(optimizer, max_lr=config['lr'], steps_per_epoch=len(train_loader), epochs=config['epochs'])\n",
    "\n",
    "#     train_model(model, train_loader, val_loader, loss_fn, optimizer, device, scheduler, scaler, config['epochs'])\n",
    "\n",
    "#     val_loss = eval_model(model, val_loader, loss_fn, device)\n",
    "#     tune.report(val_loss=val_loss)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f1e878a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.776822Z",
     "iopub.status.busy": "2025-03-02T19:16:13.776622Z",
     "iopub.status.idle": "2025-03-02T19:16:13.779414Z",
     "shell.execute_reply": "2025-03-02T19:16:13.778823Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.023341,
     "end_time": "2025-03-02T19:16:13.780565",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.757224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# config = {\n",
    "#     'max_len': tune.choice([128, 192, 256]),\n",
    "#     'batch_size': tune.choice([8, 16, 32]),\n",
    "#     'lr': tune.loguniform(1e-5, 5e-5),\n",
    "#     'epochs': tune.choice([3, 5, 7])\n",
    "# }\n",
    "\n",
    "# scheduler = ASHAScheduler(\n",
    "#     metric='val_loss',\n",
    "#     mode='min',\n",
    "#     max_t=10,\n",
    "#     grace_period=1,\n",
    "#     reduction_factor=2\n",
    "# )\n",
    "\n",
    "# reporter = CLIReporter(\n",
    "#     metric_columns=['val_loss', 'training_iteration']\n",
    "# )\n",
    "\n",
    "# analysis = tune.run(\n",
    "#     tune_model,\n",
    "#     resources_per_trial={'cpu': 2, 'gpu': 1},\n",
    "#     config=config,\n",
    "#     num_samples=20,\n",
    "#     scheduler=scheduler,\n",
    "#     progress_reporter=reporter\n",
    "# )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6538cdef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.818755Z",
     "iopub.status.busy": "2025-03-02T19:16:13.818555Z",
     "iopub.status.idle": "2025-03-02T19:16:13.822254Z",
     "shell.execute_reply": "2025-03-02T19:16:13.821425Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.024211,
     "end_time": "2025-03-02T19:16:13.823547",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.799336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def train_model(config, train_dataset, val_dataset, device):\n",
    "#     model = EmotionModel(\n",
    "#         roberta_model=RobertaModel.from_pretrained(\"roberta-base\"),\n",
    "#         n_classes=7,\n",
    "#         dropout_rate=config[\"dropout_rate\"]\n",
    "#     )\n",
    "#     model = model.to(device)\n",
    "#     optimizer = optim.Adam(model.parameters(), lr=config[\"lr\"])\n",
    "#     criterion = nn.BCEWithLogitsLoss()\n",
    "    \n",
    "#     train_loader = DataLoader(train_dataset, batch_size=config[\"batch_size\"], shuffle=True)\n",
    "#     val_loader = DataLoader(val_dataset, batch_size=config[\"batch_size\"], shuffle=False)\n",
    "    \n",
    "#     model.train()\n",
    "#     for epoch in range(config[\"epochs\"]):\n",
    "#         total_train_loss = 0.0\n",
    "#         correct_train_preds = 0\n",
    "#         total_train_preds = 0\n",
    "        \n",
    "#         for batch in train_loader:\n",
    "#             input_ids = batch[\"input_ids\"].to(device)\n",
    "#             attention_mask = batch[\"attention_mask\"].to(device)\n",
    "#             labels = batch[\"labels\"].to(device)\n",
    "\n",
    "#             optimizer.zero_grad()\n",
    "#             outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#             loss = criterion(outputs, labels)\n",
    "#             loss.backward()\n",
    "#             optimizer.step()\n",
    "            \n",
    "#             total_train_loss += loss.item()\n",
    "#             correct_train_preds += (torch.argmax(outputs, dim=1) == torch.argmax(labels, dim=1)).sum().item()\n",
    "#             total_train_preds += labels.size(0)\n",
    "        \n",
    "#         avg_train_loss = total_train_loss / len(train_loader)\n",
    "#         train_accuracy = correct_train_preds / total_train_preds\n",
    "\n",
    "#         # Validation phase\n",
    "#         model.eval()\n",
    "#         total_val_loss = 0.0\n",
    "#         correct_val_preds = 0\n",
    "#         total_val_preds = 0\n",
    "\n",
    "#         with torch.no_grad():\n",
    "#             for batch in val_loader:\n",
    "#                 input_ids = batch[\"input_ids\"].to(device)\n",
    "#                 attention_mask = batch[\"attention_mask\"].to(device)\n",
    "#                 labels = batch[\"labels\"].to(device)\n",
    "\n",
    "#                 outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#                 loss = criterion(outputs, labels)\n",
    "                \n",
    "#                 total_val_loss += loss.item()\n",
    "#                 correct_val_preds += (torch.argmax(outputs, dim=1) == torch.argmax(labels, dim=1)).sum().item()\n",
    "#                 total_val_preds += labels.size(0)\n",
    "\n",
    "#         avg_val_loss = total_val_loss / len(val_loader)\n",
    "#         val_accuracy = correct_val_preds / total_val_preds\n",
    "\n",
    "#         tune.report(loss=avg_val_loss, accuracy=val_accuracy, train_loss=avg_train_loss, train_accuracy=train_accuracy)\n",
    "#         model_save_path = os.path.join(tune.get_trial_dir(), \"checkpoint.pt\")\n",
    "#         torch.save(model.state_dict(), model_save_path)\n",
    "    \n",
    "#     return model\n",
    "\n",
    "# def train_fn(config):\n",
    "#     # Load your data here\n",
    "#     tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "\n",
    "#     train_dataset = EmotionDataset(train_ds_pd, tokenizer, max_len=128)\n",
    "#     val_dataset = EmotionDataset(validation_ds_pd, tokenizer, max_len=128)\n",
    "\n",
    "#     device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "#     train_model(config, train_dataset, val_dataset, device)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "749169af",
   "metadata": {
    "papermill": {
     "duration": 0.018338,
     "end_time": "2025-03-02T19:16:13.860414",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.842076",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## NEW TRAIN & VALIDATION 2.0\n",
    "### Custom metric is a metric for determining the best model free from any overfitting, underfitting. ```custom_metric = (avg_val_loss−val_accuracy) + α × ∣avg_train_loss−avg_val_loss∣ + β × ∣val_accuracy-train_accuracy∣``` This metric balances between low validation loss, high validation accuracy, and penalizing large discrepancies between training and validation loss. Note that, in the model selection we have used ```α = β = 0.5```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daed4cb7",
   "metadata": {
    "papermill": {
     "duration": 0.018273,
     "end_time": "2025-03-02T19:16:13.897655",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.879382",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### But since, we have probabilistic values as input and output we cannot directly calculate the accuracy, infact we need to rely on loss only. ```custom_metric = avg_val_loss + α × ∣avg_train_loss−avg_val_loss∣```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cdd08eed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.935824Z",
     "iopub.status.busy": "2025-03-02T19:16:13.935612Z",
     "iopub.status.idle": "2025-03-02T19:16:13.938732Z",
     "shell.execute_reply": "2025-03-02T19:16:13.938154Z"
    },
    "papermill": {
     "duration": 0.023464,
     "end_time": "2025-03-02T19:16:13.939796",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.916332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Custom metric calculation function\n",
    "def calculate_custom_metric(avg_val_loss, avg_train_loss, alpha=0.5):\n",
    "    loss_diff = abs(avg_train_loss - avg_val_loss)\n",
    "    custom_metric = avg_val_loss + alpha * loss_diff\n",
    "    return custom_metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b9c10336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:13.977410Z",
     "iopub.status.busy": "2025-03-02T19:16:13.977173Z",
     "iopub.status.idle": "2025-03-02T19:16:13.979771Z",
     "shell.execute_reply": "2025-03-02T19:16:13.979201Z"
    },
    "papermill": {
     "duration": 0.022427,
     "end_time": "2025-03-02T19:16:13.980823",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.958396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Custom metric calculation function\n",
    "# def calculate_custom_metric(avg_val_loss, val_accuracy, avg_train_loss, train_accuracy, alpha=0.5, beta=0.5):\n",
    "#     loss_diff = abs(avg_train_loss - avg_val_loss)\n",
    "#     accuracy_diff = abs(train_accuracy - val_accuracy)\n",
    "#     custom_metric = avg_val_loss - val_accuracy + alpha * loss_diff + beta * accuracy_diff\n",
    "#     return custom_metric"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "313f8c73",
   "metadata": {
    "papermill": {
     "duration": 0.018247,
     "end_time": "2025-03-02T19:16:14.017562",
     "exception": false,
     "start_time": "2025-03-02T19:16:13.999315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Early Stopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "abfbf9bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.055455Z",
     "iopub.status.busy": "2025-03-02T19:16:14.055235Z",
     "iopub.status.idle": "2025-03-02T19:16:14.059605Z",
     "shell.execute_reply": "2025-03-02T19:16:14.059028Z"
    },
    "papermill": {
     "duration": 0.024714,
     "end_time": "2025-03-02T19:16:14.060898",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.036184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class EarlyStopping:\n",
    "    def __init__(self, patience=5, verbose=False, delta=0):\n",
    "        \"\"\"\n",
    "        EarlyStopping to stop training when a metric has stopped improving.\n",
    "\n",
    "        Args:\n",
    "            patience (int): How long to wait after last time validation loss improved.\n",
    "            verbose (bool): If True, prints a message for each validation loss improvement.\n",
    "            delta (float): Minimum change to qualify as an improvement.\n",
    "        \"\"\"\n",
    "        self.patience = patience\n",
    "        self.verbose = verbose\n",
    "        self.delta = delta\n",
    "        self.counter = 0\n",
    "        self.best_loss = np.inf\n",
    "        self.early_stop = False\n",
    "\n",
    "    def __call__(self, val_loss, model):\n",
    "        if val_loss < self.best_loss - self.delta:\n",
    "            self.best_loss = val_loss\n",
    "            self.counter = 0\n",
    "#             if self.verbose:\n",
    "#                 print(f'Validation loss improved to {val_loss:.4f}')\n",
    "#             torch.save(model.state_dict(), 'checkpoint.pt')\n",
    "        else:\n",
    "            self.counter += 1\n",
    "#             if self.verbose:\n",
    "#                 print(f'Validation loss did not improve. Patience: {self.patience}, Counter: {self.counter}')\n",
    "        \n",
    "        if self.counter >= self.patience:\n",
    "            self.early_stop = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d9270892",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.098733Z",
     "iopub.status.busy": "2025-03-02T19:16:14.098530Z",
     "iopub.status.idle": "2025-03-02T19:16:14.102342Z",
     "shell.execute_reply": "2025-03-02T19:16:14.101767Z"
    },
    "papermill": {
     "duration": 0.024146,
     "end_time": "2025-03-02T19:16:14.103522",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.079376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def collate_fn(batch):\n",
    "    input_ids = [item['input_ids'] for item in batch]\n",
    "    attention_masks = [item['attention_mask'] for item in batch]\n",
    "    labels = torch.stack([item['labels'] for item in batch])  # Stack labels\n",
    "\n",
    "    # Dynamically pad sequences per batch\n",
    "    padded = tokenizer.pad(\n",
    "        {\"input_ids\": input_ids, \"attention_mask\": attention_masks},\n",
    "        padding=True,\n",
    "        return_tensors=\"pt\"\n",
    "    )\n",
    "\n",
    "    return {\n",
    "        'input_ids': padded['input_ids'],\n",
    "        'attention_mask': padded['attention_mask'],\n",
    "        'labels': labels\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7811d308",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.141868Z",
     "iopub.status.busy": "2025-03-02T19:16:14.141651Z",
     "iopub.status.idle": "2025-03-02T19:16:14.145561Z",
     "shell.execute_reply": "2025-03-02T19:16:14.144962Z"
    },
    "papermill": {
     "duration": 0.024439,
     "end_time": "2025-03-02T19:16:14.146732",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.122293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Define the training function with variable parameters\n",
    "# def train_model(config, train_dataset, val_dataset, device):\n",
    "# #     model = EmotionModel(\n",
    "# #         roberta_model=RobertaModel.from_pretrained(\"roberta-base\"),\n",
    "# #         n_classes=7,\n",
    "# #         dropout_rate=config[\"dropout_rate\"]\n",
    "# #     )\n",
    "#     model = EmotionModel(\n",
    "#         roberta_model=DebertaV2Model.from_pretrained('microsoft/deberta-v3-base'),\n",
    "#         n_classes=7,\n",
    "#         dropout_rate=config[\"dropout_rate\"]\n",
    "#     )\n",
    "#     model = model.to(device)\n",
    "# #     optimizer = optim.Adam(model.parameters(), lr=config[\"lr\"])\n",
    "#     optimizer = optim.AdamW(model.parameters(), lr=config[\"lr\"], weight_decay=config[\"weight_decay\"])\n",
    "# #     criterion = nn.BCEWithLogitsLoss()\n",
    "#     criterion = nn.MSELoss()\n",
    "#     scaler = GradScaler()  # Initialize GradScaler\n",
    "    \n",
    "#     train_loader = DataLoader(train_dataset, batch_size=config[\"batch_size\"], shuffle=True, collate_fn=collate_fn)\n",
    "#     val_loader = DataLoader(val_dataset, batch_size=config[\"batch_size\"], shuffle=False, collate_fn=collate_fn)\n",
    "    \n",
    "#     scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=2, verbose=True)\n",
    "    \n",
    "#     early_stopping = EarlyStopping(patience=3, verbose=True)\n",
    "    \n",
    "#     for epoch in range(config[\"epochs\"]):  # Ensure epochs are passed from config\n",
    "#         model.train()\n",
    "#         total_train_loss = 0.0\n",
    "#         correct_train_preds = 0\n",
    "#         total_train_preds = 0\n",
    "        \n",
    "#         for batch in train_loader:\n",
    "#             input_ids = batch[\"input_ids\"].to(device)\n",
    "#             attention_mask = batch[\"attention_mask\"].to(device)\n",
    "#             labels = batch[\"labels\"].to(device)\n",
    "\n",
    "#             optimizer.zero_grad()\n",
    "# #             outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "# #             loss = criterion(outputs, labels)\n",
    "# #             loss.backward()\n",
    "# #             optimizer.step()\n",
    "\n",
    "#             with autocast(device_type=device.type):  # Mixed precision\n",
    "#                 outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#                 outputs = torch.sigmoid(outputs)\n",
    "#                 loss = criterion(outputs, labels)\n",
    "            \n",
    "#             scaler.scale(loss).backward()\n",
    "#             scaler.step(optimizer)\n",
    "#             scaler.update()\n",
    "            \n",
    "# # NOTE: Apply the sigmoid fn to outputs after BCEWithLogitsLoss because the loss fn already comes with sigmoid applied, so passing the sigmoid applied ouput will give erraneous results.\n",
    "# # If we use BCELoss then pass the sigmoid applied output.\n",
    "            \n",
    "#             total_train_loss += loss.item()\n",
    "# #             correct_train_preds += (torch.argmax(outputs, dim=1) == torch.argmax(labels, dim=1)).sum().item()\n",
    "# #             total_train_preds += labels.size(0)\n",
    "#             correct_train_preds += ((outputs > 0.5) == (labels > 0.5)).sum().item()\n",
    "#             total_train_preds += labels.numel()\n",
    "        \n",
    "#         avg_train_loss = total_train_loss / len(train_loader)\n",
    "#         train_accuracy = correct_train_preds / total_train_preds\n",
    "\n",
    "#         # Validation phase\n",
    "#         model.eval()\n",
    "#         total_val_loss = 0.0\n",
    "#         correct_val_preds = 0\n",
    "#         total_val_preds = 0\n",
    "\n",
    "#         with torch.no_grad():\n",
    "#             for batch in val_loader:\n",
    "#                 input_ids = batch[\"input_ids\"].to(device)\n",
    "#                 attention_mask = batch[\"attention_mask\"].to(device)\n",
    "#                 labels = batch[\"labels\"].to(device)\n",
    "\n",
    "# #                 outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "# #                 loss = criterion(outputs, labels)\n",
    "                \n",
    "#                 with autocast(device_type=device.type):\n",
    "#                     outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#                     outputs = torch.sigmoid(outputs)\n",
    "#                     loss = criterion(outputs, labels)\n",
    "                    \n",
    "# # NOTE: Apply the sigmoid fn to outputs after BCEWithLogitsLoss because the loss fn already comes with sigmoid applied, so passing the sigmoid applied ouput will give erraneous results.\n",
    "# # If we use BCELoss then pass the sigmoid applied output.\n",
    "                \n",
    "#                 total_val_loss += loss.item()\n",
    "# #                 correct_val_preds += (torch.argmax(outputs, dim=1) == torch.argmax(labels, dim=1)).sum().item()\n",
    "# #                 total_val_preds += labels.size(0)\n",
    "#                 correct_val_preds += ((outputs > 0.5) == (labels > 0.5)).sum().item()\n",
    "#                 total_val_preds += labels.numel()\n",
    "\n",
    "#         avg_val_loss = total_val_loss / len(val_loader)\n",
    "#         val_accuracy = correct_val_preds / total_val_preds\n",
    "# #         custom_metric = avg_val_loss - val_accuracy\n",
    "# #         custom_metric = calculate_custom_metric(avg_val_loss, val_accuracy, avg_train_loss, train_accuracy)\n",
    "#         custom_metric = calculate_custom_metric(avg_val_loss, avg_train_loss)\n",
    "\n",
    "#         # Report metrics using ray.train.report\n",
    "#         report({\n",
    "#             \"loss\": avg_val_loss,\n",
    "#             \"accuracy\": val_accuracy,\n",
    "#             \"train_loss\": avg_train_loss,\n",
    "#             \"train_accuracy\": train_accuracy,\n",
    "#             \"custom_metric\": custom_metric,\n",
    "#             \"early_stopping_epoch\": epoch + 1,\n",
    "#         })\n",
    "        \n",
    "#         # Learning rate scheduler step\n",
    "#         scheduler.step(avg_val_loss)\n",
    "        \n",
    "#         # Check for early stopping\n",
    "#         early_stopping(avg_val_loss, model)\n",
    "#         if early_stopping.early_stop:\n",
    "# #             print(\"Early stopping\")\n",
    "#             break\n",
    "    \n",
    "\n",
    "#         # Save the model checkpoint after each epoch\n",
    "# #         trial_dir = os.path.join(os.environ[\"TUNE_TRIAL_DIR\"], \"checkpoint.pt\")\n",
    "# #         torch.save(model.state_dict(), 'checkpoint.pt')\n",
    "# #         checkpoint_path = f\"/kaggle/working/checkpoint_epoch_{epoch}.pt\"\n",
    "# #         torch.save(model.state_dict(), checkpoint_path)\n",
    "    \n",
    "#     return model\n",
    "\n",
    "# def train_fn(config):\n",
    "#     # Load your data here\n",
    "# #     tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "#     tokenizer = DebertaV2Tokenizer.from_pretrained('microsoft/deberta-v3-base')\n",
    "\n",
    "#     train_dataset = EmotionDataset(train_ds_pd, tokenizer, max_len=128)\n",
    "#     val_dataset = EmotionDataset(validation_ds_pd, tokenizer, max_len=128)\n",
    "\n",
    "#     device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "#     train_model(config, train_dataset, val_dataset, device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b61fce9",
   "metadata": {
    "papermill": {
     "duration": 0.018419,
     "end_time": "2025-03-02T19:16:14.184027",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.165608",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## SEARCH SPACE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "4cd1558e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.222629Z",
     "iopub.status.busy": "2025-03-02T19:16:14.222419Z",
     "iopub.status.idle": "2025-03-02T19:16:14.225386Z",
     "shell.execute_reply": "2025-03-02T19:16:14.224603Z"
    },
    "papermill": {
     "duration": 0.023273,
     "end_time": "2025-03-02T19:16:14.226598",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.203325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# search_space = {\n",
    "#     'dropout_rate': tune.choice([0.2, 0.25, 0.27, 0.3]),\n",
    "#     'batch_size': 1,\n",
    "#     'weight_decay': tune.choice([1e-6, 2e-6, 1e-5, 2e-5, 5e-5, 5e-6]),\n",
    "#     'lr': tune.choice([1e-6, 1e-5, 2e-5, 2e-6, 5e-6, 5e-5]),\n",
    "#     'epochs': tune.choice([5, 10, 15])\n",
    "# }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5b79fc36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.264477Z",
     "iopub.status.busy": "2025-03-02T19:16:14.264265Z",
     "iopub.status.idle": "2025-03-02T19:16:14.267004Z",
     "shell.execute_reply": "2025-03-02T19:16:14.266383Z"
    },
    "papermill": {
     "duration": 0.022596,
     "end_time": "2025-03-02T19:16:14.268162",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.245566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# search_space = {\n",
    "#     'hidden_size': tune.choice([32, 64, 128, 256]),\n",
    "#     'dropout_rate': tune.uniform(0.1, 0.5),\n",
    "#     'batch_size': tune.choice([16, 32, 64]),\n",
    "#     'weight_decay': tune.loguniform(1e-6, 1e-1),\n",
    "#     'lr': tune.loguniform(1e-6, 1e-1),\n",
    "#     'epochs': tune.choice([3, 5, 7, 10, 12, 15, 20])\n",
    "# }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "897aadc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.305826Z",
     "iopub.status.busy": "2025-03-02T19:16:14.305627Z",
     "iopub.status.idle": "2025-03-02T19:16:14.308326Z",
     "shell.execute_reply": "2025-03-02T19:16:14.307757Z"
    },
    "papermill": {
     "duration": 0.022816,
     "end_time": "2025-03-02T19:16:14.309398",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.286582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# search_space = {\n",
    "#     'dropout_rate': tune.uniform(0.1, 0.5),\n",
    "#     'batch_size': tune.choice([16, 32, 64]),\n",
    "#     'weight_decay': tune.loguniform(1e-6, 1e-1),\n",
    "#     'lr': tune.loguniform(1e-6, 1e-1),\n",
    "#     'epochs': tune.choice([3, 5, 7, 10, 12, 15, 20])\n",
    "# }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "459d4352",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.347368Z",
     "iopub.status.busy": "2025-03-02T19:16:14.347156Z",
     "iopub.status.idle": "2025-03-02T19:16:14.349905Z",
     "shell.execute_reply": "2025-03-02T19:16:14.349288Z"
    },
    "papermill": {
     "duration": 0.022996,
     "end_time": "2025-03-02T19:16:14.351090",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.328094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# search_space = {\n",
    "#     'hidden_size': tune.choice([32, 64, 128, 256]),\n",
    "#     'dropout_rate': tune.uniform(0.1, 0.5),\n",
    "#     'batch_size': tune.choice([16, 32, 64]),\n",
    "#     'weight_decay': tune.loguniform(1e-6, 1e-1),\n",
    "#     'lr': tune.loguniform(1e-6, 1e-1),\n",
    "#     'epochs': tune.randint(3, 21)\n",
    "# }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "cd5c6fa8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.388633Z",
     "iopub.status.busy": "2025-03-02T19:16:14.388431Z",
     "iopub.status.idle": "2025-03-02T19:16:14.391138Z",
     "shell.execute_reply": "2025-03-02T19:16:14.390474Z"
    },
    "papermill": {
     "duration": 0.022742,
     "end_time": "2025-03-02T19:16:14.392260",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.369518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# search_space = {\n",
    "#     'hidden_size': tune.choice([256, 512]),\n",
    "#     'dropout_rate': tune.uniform(0.1, 0.5),\n",
    "#     'batch_size': tune.choice([4, 8, 16]),\n",
    "#     'lr': tune.loguniform(1e-5, 1e-2)\n",
    "# }"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad48b755",
   "metadata": {
    "papermill": {
     "duration": 0.019554,
     "end_time": "2025-03-02T19:16:14.430304",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.410750",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## SEARCH ALGO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d1f8ea9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.469241Z",
     "iopub.status.busy": "2025-03-02T19:16:14.469034Z",
     "iopub.status.idle": "2025-03-02T19:16:14.471598Z",
     "shell.execute_reply": "2025-03-02T19:16:14.470992Z"
    },
    "papermill": {
     "duration": 0.023058,
     "end_time": "2025-03-02T19:16:14.472712",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.449654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optuna_search = OptunaSearch(\n",
    "#     metric=\"custom_metric\",\n",
    "#     mode=\"min\"\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "eafd0eaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.511188Z",
     "iopub.status.busy": "2025-03-02T19:16:14.510987Z",
     "iopub.status.idle": "2025-03-02T19:16:14.513583Z",
     "shell.execute_reply": "2025-03-02T19:16:14.512987Z"
    },
    "papermill": {
     "duration": 0.0229,
     "end_time": "2025-03-02T19:16:14.514612",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.491712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optuna_search = OptunaSearch(\n",
    "#     metric=[\n",
    "#         tune.MultiObjective(\"loss\", \"min\"),\n",
    "#         tune.MultiObjective(\"custom_metric\", \"min\"),\n",
    "#         tune.MultiObjective(\"accuracy\", \"max\")\n",
    "#     ],\n",
    "#     mode=[\n",
    "#         \"min\",  # for loss\n",
    "#         \"min\",  # for custom metric\n",
    "#         \"max\"   # for accuracy\n",
    "#     ]\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "72eb7b42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.553042Z",
     "iopub.status.busy": "2025-03-02T19:16:14.552781Z",
     "iopub.status.idle": "2025-03-02T19:16:14.555657Z",
     "shell.execute_reply": "2025-03-02T19:16:14.554896Z"
    },
    "papermill": {
     "duration": 0.022984,
     "end_time": "2025-03-02T19:16:14.556766",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.533782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# optuna_search = OptunaSearch(\n",
    "#     metric=\"custom_metric\",\n",
    "#     mode=\"min\"\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b52cb3d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.594809Z",
     "iopub.status.busy": "2025-03-02T19:16:14.594604Z",
     "iopub.status.idle": "2025-03-02T19:16:14.597215Z",
     "shell.execute_reply": "2025-03-02T19:16:14.596603Z"
    },
    "papermill": {
     "duration": 0.022817,
     "end_time": "2025-03-02T19:16:14.598383",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.575566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Setup Optuna for hyperparameter optimization\n",
    "# optuna_search = OptunaSearch(\n",
    "#     metric=\"loss\",\n",
    "#     mode=\"min\"\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "61fb16ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.636370Z",
     "iopub.status.busy": "2025-03-02T19:16:14.636138Z",
     "iopub.status.idle": "2025-03-02T19:16:14.639047Z",
     "shell.execute_reply": "2025-03-02T19:16:14.638254Z"
    },
    "papermill": {
     "duration": 0.022974,
     "end_time": "2025-03-02T19:16:14.640162",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.617188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# scheduler = ASHAScheduler(\n",
    "#     metric=\"loss\",\n",
    "#     mode=\"min\",\n",
    "#     max_t=15,\n",
    "#     grace_period=1,\n",
    "#     reduction_factor=2\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "0e89a50a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.677666Z",
     "iopub.status.busy": "2025-03-02T19:16:14.677439Z",
     "iopub.status.idle": "2025-03-02T19:16:14.680338Z",
     "shell.execute_reply": "2025-03-02T19:16:14.679557Z"
    },
    "papermill": {
     "duration": 0.022986,
     "end_time": "2025-03-02T19:16:14.681518",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.658532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# scheduler = ASHAScheduler(\n",
    "#     metric=\"accuracy\",\n",
    "#     mode=\"max\",\n",
    "#     max_t=15,\n",
    "#     grace_period=1,\n",
    "#     reduction_factor=2\n",
    "# )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a373f722",
   "metadata": {
    "papermill": {
     "duration": 0.018626,
     "end_time": "2025-03-02T19:16:14.718711",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.700085",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## SCHEDULER ALGO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b32dea6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.757328Z",
     "iopub.status.busy": "2025-03-02T19:16:14.757090Z",
     "iopub.status.idle": "2025-03-02T19:16:14.759678Z",
     "shell.execute_reply": "2025-03-02T19:16:14.759118Z"
    },
    "papermill": {
     "duration": 0.023413,
     "end_time": "2025-03-02T19:16:14.760957",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.737544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# scheduler = ASHAScheduler(\n",
    "#     metric='custom_metric',\n",
    "#     mode='min',\n",
    "#     max_t=22,\n",
    "#     grace_period=3,\n",
    "#     reduction_factor=2\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5fdb8e0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.799229Z",
     "iopub.status.busy": "2025-03-02T19:16:14.799021Z",
     "iopub.status.idle": "2025-03-02T19:16:14.801749Z",
     "shell.execute_reply": "2025-03-02T19:16:14.801119Z"
    },
    "papermill": {
     "duration": 0.023395,
     "end_time": "2025-03-02T19:16:14.803043",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.779648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# scheduler = AsyncHyperBandScheduler(\n",
    "#     metric='accuracy',\n",
    "#     mode='max',\n",
    "#     max_t=22,\n",
    "#     grace_period=3,\n",
    "#     reduction_factor=2\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "7aab8605",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.841365Z",
     "iopub.status.busy": "2025-03-02T19:16:14.841144Z",
     "iopub.status.idle": "2025-03-02T19:16:14.843752Z",
     "shell.execute_reply": "2025-03-02T19:16:14.843186Z"
    },
    "papermill": {
     "duration": 0.02276,
     "end_time": "2025-03-02T19:16:14.844823",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.822063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# scheduler = ASHAScheduler(\n",
    "#     metric=[\n",
    "#         tune.MultiObjective(\"loss\", \"min\"),\n",
    "#         tune.MultiObjective(\"custom_metric\", \"min\"),\n",
    "#         tune.MultiObjective(\"accuracy\", \"max\")\n",
    "#     ],\n",
    "#     mode=[\n",
    "#         \"min\",  # for loss\n",
    "#         \"min\",  # for custom metric\n",
    "#         \"max\"   # for accuracy\n",
    "#     ],\n",
    "#     max_t=22,\n",
    "#     grace_period=3,\n",
    "#     reduction_factor=2\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b32f8e8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.882663Z",
     "iopub.status.busy": "2025-03-02T19:16:14.882449Z",
     "iopub.status.idle": "2025-03-02T19:16:14.885060Z",
     "shell.execute_reply": "2025-03-02T19:16:14.884451Z"
    },
    "papermill": {
     "duration": 0.022997,
     "end_time": "2025-03-02T19:16:14.886326",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.863329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# scheduler = ASHAScheduler(\n",
    "#     metric=\"custom_metric\",\n",
    "#     mode=\"min\",\n",
    "#     max_t=22,\n",
    "#     grace_period=3,\n",
    "#     reduction_factor=2\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "38cf5710",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.923702Z",
     "iopub.status.busy": "2025-03-02T19:16:14.923500Z",
     "iopub.status.idle": "2025-03-02T19:16:14.926112Z",
     "shell.execute_reply": "2025-03-02T19:16:14.925530Z"
    },
    "papermill": {
     "duration": 0.022623,
     "end_time": "2025-03-02T19:16:14.927276",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.904653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# scheduler = HyperBandScheduler(\n",
    "#     time_attr='training_iteration',  # The attribute to use for the time dimension (similar to ASHA's `max_t`)\n",
    "#     metric='custom_metric',          # The metric to optimize (similar to ASHA's `metric`)\n",
    "#     mode='min',                      # Optimization mode (minimize `custom_metric`)\n",
    "#     max_t=22,                        # Maximum number of iterations per trial (similar to ASHA's `max_t`)\n",
    "#     reduction_factor=2               # Reduction factor (similar to ASHA)\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "288aa89d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:14.964926Z",
     "iopub.status.busy": "2025-03-02T19:16:14.964688Z",
     "iopub.status.idle": "2025-03-02T19:16:14.967358Z",
     "shell.execute_reply": "2025-03-02T19:16:14.966757Z"
    },
    "papermill": {
     "duration": 0.02264,
     "end_time": "2025-03-02T19:16:14.968469",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.945829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# reporter = CLIReporter(\n",
    "#     metric_columns=[\"loss\", \"accuracy\", \"custom_metric\", \"training_iteration\", \"train_loss\", \"train_accuracy\", \"early_stopping_epoch\"],\n",
    "#     print_intermediate_tables=False\n",
    "# )\n",
    "# reporter.verbosity = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75e66a40",
   "metadata": {
    "papermill": {
     "duration": 0.018238,
     "end_time": "2025-03-02T19:16:15.005305",
     "exception": false,
     "start_time": "2025-03-02T19:16:14.987067",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Custom CLI Reporter Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "03207354",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:15.042961Z",
     "iopub.status.busy": "2025-03-02T19:16:15.042725Z",
     "iopub.status.idle": "2025-03-02T19:16:15.045651Z",
     "shell.execute_reply": "2025-03-02T19:16:15.045046Z"
    },
    "papermill": {
     "duration": 0.02274,
     "end_time": "2025-03-02T19:16:15.046721",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.023981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class FinalTableCLIReporter(CLIReporter):\n",
    "#     def __init__(self, *args, **kwargs):\n",
    "#         super().__init__(*args, **kwargs)\n",
    "#         self.results = []\n",
    "\n",
    "#     def _update(self, *args, **kwargs):\n",
    "#         # Collect results without printing intermediate updates\n",
    "#         self.results.append(kwargs)\n",
    "\n",
    "#     def print_table(self):\n",
    "#         # Print only the final results\n",
    "#         if self.results:\n",
    "#             final_results = [result for result in self.results]\n",
    "#             headers = list(final_results[0].keys()) if final_results else []\n",
    "#             table = [headers] + [list(result.values()) for result in final_results]\n",
    "#             for row in table:\n",
    "#                 print(\" | \".join(str(cell) for cell in row))\n",
    "\n",
    "#     def _report(self, *args, **kwargs):\n",
    "#         # Override this to prevent intermediate print\n",
    "#         self._update(*args, **kwargs)\n",
    "\n",
    "#     def _finalize(self):\n",
    "#         # Call this to print the final table\n",
    "#         self.print_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b43ff722",
   "metadata": {
    "papermill": {
     "duration": 0.018291,
     "end_time": "2025-03-02T19:16:15.083619",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.065328",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## REPORTER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3b4b0cfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:15.121804Z",
     "iopub.status.busy": "2025-03-02T19:16:15.121587Z",
     "iopub.status.idle": "2025-03-02T19:16:15.124393Z",
     "shell.execute_reply": "2025-03-02T19:16:15.123704Z"
    },
    "papermill": {
     "duration": 0.023444,
     "end_time": "2025-03-02T19:16:15.125758",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.102314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # To ignore warinings\n",
    "# import warnings\n",
    "# warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "b9931a08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:15.164121Z",
     "iopub.status.busy": "2025-03-02T19:16:15.163914Z",
     "iopub.status.idle": "2025-03-02T19:16:15.167087Z",
     "shell.execute_reply": "2025-03-02T19:16:15.166411Z"
    },
    "papermill": {
     "duration": 0.023644,
     "end_time": "2025-03-02T19:16:15.168295",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.144651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # %load_ext tensorboard\n",
    "# # %tensorboard --logdir /kaggle/working/tensorboard_logs\n",
    "\n",
    "\n",
    "# # ray.init(ignore_reinit_error=True)\n",
    "# # reporter = CLIReporter(\n",
    "# #     metric_columns=[\"loss\", \"accuracy\", \"custom_metric\", \"training_iteration\", \"train_loss\", \"train_accuracy\", \"early_stopping_epoch\"],\n",
    "# #     print_intermediate_tables=False\n",
    "# # )\n",
    "\n",
    "# reporter = JupyterNotebookReporter(\n",
    "#     metric_columns=[\"loss\", \"accuracy\", \"custom_metric\", \"training_iteration\", \"train_loss\", \"train_accuracy\", \"early_stopping_epoch\"],\n",
    "#     print_intermediate_tables=False,\n",
    "# )\n",
    "\n",
    "# # tuner = tune.run(\n",
    "# #     train_fn,\n",
    "# #     config=search_space,\n",
    "# #     num_samples=25,\n",
    "# #     progress_reporter=reporter,\n",
    "# #     resources_per_trial={\"cpu\": 4, \"gpu\": 2},  # Adjust resources as needed\n",
    "# #     scheduler=ASHAScheduler(\n",
    "# #         metric=\"accuracy\",\n",
    "# #         mode=\"max\",\n",
    "# #         max_t=15,\n",
    "# #         grace_period=1,\n",
    "# #         reduction_factor=2\n",
    "# #     )\n",
    "# # )\n",
    "\n",
    "# # reporter = TensorBoardReporter(\n",
    "# #     metric_columns=[\"loss\", \"accuracy\", \"training_iteration\", \"train_loss\", \"train_accuracy\"]\n",
    "# # )\n",
    "\n",
    "\n",
    "# result = tune.run(\n",
    "#     train_fn,\n",
    "#     resources_per_trial={\"cpu\": 2, \"gpu\": 1},\n",
    "#     config=search_space,\n",
    "#     num_samples=15,\n",
    "#     scheduler=scheduler,\n",
    "#     progress_reporter=reporter,\n",
    "#     search_alg=optuna_search\n",
    "# )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eeaf18c",
   "metadata": {
    "papermill": {
     "duration": 0.018801,
     "end_time": "2025-03-02T19:16:15.206026",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.187225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## REPORTER RESULTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ebacada2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:15.244759Z",
     "iopub.status.busy": "2025-03-02T19:16:15.244557Z",
     "iopub.status.idle": "2025-03-02T19:16:15.247638Z",
     "shell.execute_reply": "2025-03-02T19:16:15.246864Z"
    },
    "papermill": {
     "duration": 0.023557,
     "end_time": "2025-03-02T19:16:15.248882",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.225325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # best_trial = result.get_best_trial(\"loss\", \"min\", \"last\")\n",
    "# best_trial = result.get_best_trial(\"accuracy\", \"max\", \"last\")\n",
    "# # best_checkpoint_dir = best_trial.checkpoint.value\n",
    "# print(f\"Best trial config: {best_trial.config}\")\n",
    "# print(f\"Best trial final validation loss: {best_trial.last_result['loss']}\")\n",
    "# print(f\"Best trial final validation accuracy: {best_trial.last_result['accuracy']}\")\n",
    "# print(f\"Best trial final training loss: {best_trial.last_result['train_loss']}\")\n",
    "# print(f\"Best trial final training accuracy: {best_trial.last_result['train_accuracy']}\")\n",
    "# print(f\"Best trial final custom_metric: {best_trial.last_result['custom_metric']}\")\n",
    "# print(f\"Best trial final Early Stopping Epoch: {best_trial.last_result['early_stopping_epoch']}\")\n",
    "# print(f\"NOTE: Both the accuracy are based on converting values > 0.5 to 1 and values < 0.5 to 0, hence, rely on the loss, MSE here.\")\n",
    "\n",
    "\n",
    "# # print(\"\\nModel Parameters:\")\n",
    "# # for name, param in best_model.named_parameters():\n",
    "# #     print(f\"{name}: {param.size()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "659fd6d1",
   "metadata": {
    "papermill": {
     "duration": 0.018943,
     "end_time": "2025-03-02T19:16:15.286677",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.267734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Function to Train the Model with the Best Configuration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4e571b7",
   "metadata": {
    "papermill": {
     "duration": 0.018904,
     "end_time": "2025-03-02T19:16:15.324661",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.305757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##### LOG WRITER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "1f9ab267",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:15.363091Z",
     "iopub.status.busy": "2025-03-02T19:16:15.362882Z",
     "iopub.status.idle": "2025-03-02T19:16:15.367370Z",
     "shell.execute_reply": "2025-03-02T19:16:15.366583Z"
    },
    "papermill": {
     "duration": 0.024881,
     "end_time": "2025-03-02T19:16:15.368555",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.343674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.utils.tensorboard import SummaryWriter\n",
    "# **TensorBoard Logging**\n",
    "log_dir = \"/kaggle/working/logs\"\n",
    "writer = SummaryWriter(log_dir=log_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea11103e",
   "metadata": {
    "papermill": {
     "duration": 0.018412,
     "end_time": "2025-03-02T19:16:15.405746",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.387334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### TRAIN BEST MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "0cfbab6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:15.445238Z",
     "iopub.status.busy": "2025-03-02T19:16:15.445008Z",
     "iopub.status.idle": "2025-03-02T19:16:15.461529Z",
     "shell.execute_reply": "2025-03-02T19:16:15.460745Z"
    },
    "papermill": {
     "duration": 0.038334,
     "end_time": "2025-03-02T19:16:15.462669",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.424335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_best_model(config, device, train_dataset = train_ds_pd, val_dataset = validation_ds_pd):\n",
    "    \n",
    "    print(f\"\"\"\n",
    "    Tuning Model with:\n",
    "    {config}\n",
    "    \"\"\")\n",
    "    \n",
    "#     model = EmotionModel(\n",
    "#         roberta_model=RobertaModel.from_pretrained(\"roberta-base\"),\n",
    "#         n_classes=7,\n",
    "#         dropout_rate=config[\"dropout_rate\"]\n",
    "#     )\n",
    "    model = EmotionModel(\n",
    "        roberta_model=DebertaV2Model.from_pretrained('microsoft/deberta-v3-base'),\n",
    "        n_classes=7,\n",
    "        dropout_rate=config[\"dropout_rate\"]\n",
    "    )\n",
    "    model = model.to(device)\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=config[\"lr\"], weight_decay=config[\"weight_decay\"])\n",
    "#     criterion = nn.BCEWithLogitsLoss()\n",
    "    criterion = nn.MSELoss()\n",
    "    scaler = GradScaler()\n",
    "    \n",
    "    ## DATASET ENCODING\n",
    "    \n",
    "    train_dataset = EmotionDataset(train_ds_pd, tokenizer, max_len=128)\n",
    "    val_dataset = EmotionDataset(validation_ds_pd, tokenizer, max_len=128)\n",
    "\n",
    "    train_loader = DataLoader(train_dataset, batch_size=config[\"batch_size\"], shuffle=True, collate_fn=collate_fn)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=config[\"batch_size\"], shuffle=False, collate_fn=collate_fn)\n",
    "    \n",
    "    scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=2, verbose=True)\n",
    "    \n",
    "    early_stopping = EarlyStopping(patience=5, verbose=True)\n",
    "\n",
    "    best_val_loss = float(\"inf\")\n",
    "    best_model_path = None\n",
    "    \n",
    "    # Early stopping parameters\n",
    "    patience = 5\n",
    "    best_val_loss = float('inf')\n",
    "    epochs_since_improvement = 0\n",
    "\n",
    "     # **TensorBoard Logging**\n",
    "    log_dir = \"/kaggle/working/logs\"\n",
    "    writer = SummaryWriter(log_dir=log_dir)\n",
    "\n",
    "    global_step = 0  # Track total batch count\n",
    "\n",
    "    \n",
    "    ### Running for config epochs +patience+1 for introducing noise. \n",
    "    \n",
    "    for epoch in range((config[\"epochs\"]+patience+1)):\n",
    "        model.train()\n",
    "        total_train_loss = 0.0\n",
    "        correct_train_preds = 0\n",
    "        total_train_preds = 0\n",
    "        \n",
    "        for batch_idx, batch in enumerate(train_loader):\n",
    "            input_ids = batch[\"input_ids\"].to(device)\n",
    "            attention_mask = batch[\"attention_mask\"].to(device)\n",
    "            labels = batch[\"labels\"].to(device)\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "#             outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#             loss = criterion(outputs, labels)\n",
    "#             loss.backward()\n",
    "#             optimizer.step()\n",
    "\n",
    "            with autocast(device_type=device.type):\n",
    "                outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "                outputs = torch.sigmoid(outputs)\n",
    "                loss = criterion(outputs, labels)\n",
    "            \n",
    "            scaler.scale(loss).backward()\n",
    "            scaler.step(optimizer)\n",
    "            scaler.update()\n",
    "            \n",
    "# NOTE: Apply the sigmoid fn to outputs after BCEWithLogitsLoss because the loss fn already comes with sigmoid applied, so passing the sigmoid applied ouput will give erraneous results.\n",
    "# If we use BCELoss then pass the sigmoid applied output.\n",
    "            \n",
    "            total_train_loss += loss.item()\n",
    "#             correct_train_preds += (torch.argmax(outputs, dim=1) == torch.argmax(labels, dim=1)).sum().item()\n",
    "#             total_train_preds += labels.size(0)\n",
    "            correct_train_preds += ((outputs > 0.5) == (labels > 0.5)).sum().item()\n",
    "            total_train_preds += labels.numel()\n",
    "\n",
    "            # **Log per batch**\n",
    "            avg_train_loss = total_train_loss / len(train_loader)\n",
    "            train_accuracy = correct_train_preds / total_train_preds\n",
    "            current_lr = optimizer.param_groups[0]['lr']\n",
    "            writer.add_scalar(\"Avg Train Loss/Batch\", avg_train_loss, batch_idx)\n",
    "            writer.add_scalar(\"Learning Rate/Batch\", current_lr, batch_idx)\n",
    "            writer.add_scalar(\"Avg Train Accuracy/Batch\", train_accuracy, batch_idx)\n",
    "            writer.add_scalar(\"Weight Decay/Batch\", config[\"weight_decay\"], batch_idx)\n",
    "\n",
    "\n",
    "        \n",
    "        avg_train_loss = total_train_loss / len(train_loader)\n",
    "        train_accuracy = correct_train_preds / total_train_preds\n",
    "\n",
    "\n",
    "\n",
    "        # Validation phase\n",
    "        model.eval()\n",
    "        total_val_loss = 0.0\n",
    "        correct_val_preds = 0\n",
    "        total_val_preds = 0\n",
    "\n",
    "        with torch.no_grad():\n",
    "            for batch_idx, batch in enumerate(val_loader):\n",
    "                input_ids = batch[\"input_ids\"].to(device)\n",
    "                attention_mask = batch[\"attention_mask\"].to(device)\n",
    "                labels = batch[\"labels\"].to(device)\n",
    "\n",
    "#                 outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "#                 loss = criterion(outputs, labels)\n",
    "\n",
    "                with autocast(device_type=device.type):\n",
    "                    outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "                    outputs = torch.sigmoid(outputs)\n",
    "                    loss = criterion(outputs, labels)\n",
    "                    \n",
    "# NOTE: Apply the sigmoid fn to outputs after BCEWithLogitsLoss because the loss fn already comes with sigmoid applied, so passing the sigmoid applied ouput will give erraneous results.\n",
    "# If we use BCELoss then pass the sigmoid applied output.\n",
    "                \n",
    "                total_val_loss += loss.item()\n",
    "#                 correct_val_preds += (torch.argmax(outputs, dim=1) == torch.argmax(labels, dim=1)).sum().item()\n",
    "#                 total_val_preds += labels.size(0)\n",
    "                correct_val_preds += ((outputs > 0.5) == (labels > 0.5)).sum().item()\n",
    "                total_val_preds += labels.numel()\n",
    "\n",
    "                avg_val_loss = total_val_loss / len(val_loader)\n",
    "                val_accuracy = correct_val_preds / total_val_preds\n",
    "\n",
    "                current_lr = optimizer.param_groups[0]['lr']\n",
    "                writer.add_scalar(\"Avg Train Loss/Batch\", avg_train_loss, batch_idx)\n",
    "                writer.add_scalar(\"Learning Rate/Batch\", current_lr, batch_idx)\n",
    "                writer.add_scalar(\"Avg Train Accuracy/Batch\", train_accuracy, batch_idx)\n",
    "                writer.add_scalar(\"Weight Decay/Batch\", config[\"weight_decay\"], batch_idx)\n",
    "\n",
    "        avg_val_loss = total_val_loss / len(val_loader)\n",
    "        val_accuracy = correct_val_preds / total_val_preds\n",
    "\n",
    "        # Save the model checkpoint after each epoch\n",
    "        checkpoint_path = f\"/kaggle/working/best_checkpoint.pt\"\n",
    "#         torch.save(model.state_dict(), checkpoint_path)\n",
    "\n",
    "#         # Save the best model based on validation loss\n",
    "#         if avg_val_loss < best_val_loss:\n",
    "#             best_val_loss = avg_val_loss\n",
    "#             best_model_path = checkpoint_path\n",
    "\n",
    "        # Learning rate scheduler step\n",
    "        scheduler.step(avg_val_loss)\n",
    "\n",
    "        if avg_val_loss < best_val_loss:\n",
    "            best_val_loss = avg_val_loss\n",
    "            epochs_since_improvement = 0\n",
    "            best_model_path = checkpoint_path\n",
    "            # Save the model checkpoint with the best validation loss\n",
    "#             checkpoint_path = f\"/kaggle/working/best_checkpoint.pt\"\n",
    "#             torch.save(model.state_dict(), checkpoint_path)\n",
    "            torch.save({\n",
    "                'model_state_dict': model.state_dict(),\n",
    "                'config': config  # Save configuration\n",
    "            }, checkpoint_path)\n",
    "    \n",
    "        else:\n",
    "            epochs_since_improvement += 1\n",
    "\n",
    "        early_stopping(avg_val_loss, model)\n",
    "        if early_stopping.early_stop:\n",
    "            print(f\"Early stopping at epoch {epoch+1}\")\n",
    "            print(f\"Best Model Epoch Saved: {epoch - patience+1}\")\n",
    "#             print(\"Early stopping\")\n",
    "            break\n",
    "        \n",
    "#         if epochs_since_improvement >= patience:\n",
    "#             print(f\"Early stopping at epoch {epoch + 1}\")\n",
    "#             print(f\"Best Model Epoch Saved: {epoch - patience}\")\n",
    "#             break\n",
    "            \n",
    "        custom_metric = calculate_custom_metric(avg_val_loss, avg_train_loss)        \n",
    "#         custom_metric = calculate_custom_metric(avg_val_loss, val_accuracy, avg_train_loss, train_accuracy)\n",
    "\n",
    "        # **Log per epoch**\n",
    "        writer.add_scalar(\"Loss Train/Epoch\", avg_train_loss, epoch)\n",
    "        writer.add_scalar(\"Loss Validation/Epoch\", avg_val_loss, epoch)\n",
    "        writer.add_scalar(\"Accuracy Train/Epoch\", train_accuracy, epoch)\n",
    "        writer.add_scalar(\"Accuracy Validation/Epoch\", val_accuracy, epoch)\n",
    "        writer.add_scalar(\"Learning Rate/Epoch\", current_lr, epoch)\n",
    "        writer.add_scalar(\"Combined Custom Metric (Loss) /Epoch\", custom_metric, epoch)\n",
    "        \n",
    "        print(f\"\"\"\n",
    "        Validation Loss: {avg_val_loss},\n",
    "        Training Loss: {avg_train_loss},\n",
    "        Argmax Binary Validation Accuracy: {val_accuracy},\n",
    "        Argmax Binary Training Accuracy: {train_accuracy},\n",
    "        Custom Metric: {custom_metric},\n",
    "        Epochs: {epoch+1}\n",
    "        \"\"\")\n",
    "    \n",
    "    print(f\"Best Validation Loss: {best_val_loss}, Best Validation accuracy: {val_accuracy}\")\n",
    "    \n",
    "    return model, best_model_path"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0e46412",
   "metadata": {
    "papermill": {
     "duration": 0.018352,
     "end_time": "2025-03-02T19:16:15.499455",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.481103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# BEST MODEL AFTER FINAL TRAINING & VALIDATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "33a077c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T19:16:15.538687Z",
     "iopub.status.busy": "2025-03-02T19:16:15.538450Z",
     "iopub.status.idle": "2025-03-02T20:21:36.623252Z",
     "shell.execute_reply": "2025-03-02T20:21:36.622128Z"
    },
    "papermill": {
     "duration": 3921.128083,
     "end_time": "2025-03-02T20:21:36.646055",
     "exception": false,
     "start_time": "2025-03-02T19:16:15.517972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    Tuning Model with:\n",
      "    {'dropout_rate': 0.2, 'batch_size': 8, 'weight_decay': 2e-06, 'lr': 5e-05, 'epochs': 15}\n",
      "    \n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e7f4bb6d24174803997fe29cfe2c5f91",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "pytorch_model.bin:   0%|          | 0.00/371M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "        Validation Loss: 0.03705380055544083,\n",
      "        Training Loss: 0.05043000725717628,\n",
      "        Argmax Binary Validation Accuracy: 0.9103997763488957,\n",
      "        Argmax Binary Training Accuracy: 0.8928849360755976,\n",
      "        Custom Metric: 0.043741903906308555,\n",
      "        Epochs: 1\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.02305299087856838,\n",
      "        Training Loss: 0.030256682103825913,\n",
      "        Argmax Binary Validation Accuracy: 0.9390550740844283,\n",
      "        Argmax Binary Training Accuracy: 0.9255419677598666,\n",
      "        Custom Metric: 0.026654836491197147,\n",
      "        Epochs: 2\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.01856090755245532,\n",
      "        Training Loss: 0.021901578039423733,\n",
      "        Argmax Binary Validation Accuracy: 0.9443667878110148,\n",
      "        Argmax Binary Training Accuracy: 0.9400500277932184,\n",
      "        Custom Metric: 0.020231242795939526,\n",
      "        Epochs: 3\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.011836375711027358,\n",
      "        Training Loss: 0.016768404935461247,\n",
      "        Argmax Binary Validation Accuracy: 0.9603019289907744,\n",
      "        Argmax Binary Training Accuracy: 0.9515703168426903,\n",
      "        Custom Metric: 0.014302390323244303,\n",
      "        Epochs: 4\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.010869217517210927,\n",
      "        Training Loss: 0.013225520452745403,\n",
      "        Argmax Binary Validation Accuracy: 0.9665921162985742,\n",
      "        Argmax Binary Training Accuracy: 0.9599499722067816,\n",
      "        Custom Metric: 0.012047368984978164,\n",
      "        Epochs: 5\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.010104114101068262,\n",
      "        Training Loss: 0.011184010565632426,\n",
      "        Argmax Binary Validation Accuracy: 0.9672910259994408,\n",
      "        Argmax Binary Training Accuracy: 0.9650222345747638,\n",
      "        Custom Metric: 0.010644062333350343,\n",
      "        Epochs: 6\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.00803445114297574,\n",
      "        Training Loss: 0.009228940829245105,\n",
      "        Argmax Binary Validation Accuracy: 0.9738607771875873,\n",
      "        Argmax Binary Training Accuracy: 0.9688854919399666,\n",
      "        Custom Metric: 0.008631695986110422,\n",
      "        Epochs: 7\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.007201637708021735,\n",
      "        Training Loss: 0.008411801477816274,\n",
      "        Argmax Binary Validation Accuracy: 0.975398378529494,\n",
      "        Argmax Binary Training Accuracy: 0.9717065036131184,\n",
      "        Custom Metric: 0.007806719592919005,\n",
      "        Epochs: 8\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.007057430839722656,\n",
      "        Training Loss: 0.0070374063016839525,\n",
      "        Argmax Binary Validation Accuracy: 0.9784735812133072,\n",
      "        Argmax Binary Training Accuracy: 0.975041689827682,\n",
      "        Custom Metric: 0.007067443108742008,\n",
      "        Epochs: 9\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.005769929950929509,\n",
      "        Training Loss: 0.006194227022356227,\n",
      "        Argmax Binary Validation Accuracy: 0.9766564159910539,\n",
      "        Argmax Binary Training Accuracy: 0.9770705947748749,\n",
      "        Custom Metric: 0.005982078486642868,\n",
      "        Epochs: 10\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.005260317739157472,\n",
      "        Training Loss: 0.005546417585433667,\n",
      "        Argmax Binary Validation Accuracy: 0.9818283477774672,\n",
      "        Argmax Binary Training Accuracy: 0.9780155642023346,\n",
      "        Custom Metric: 0.00540336766229557,\n",
      "        Epochs: 11\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.0041118676354017225,\n",
      "        Training Loss: 0.005016303405275293,\n",
      "        Argmax Binary Validation Accuracy: 0.9816885658372938,\n",
      "        Argmax Binary Training Accuracy: 0.9799332962757087,\n",
      "        Custom Metric: 0.004564085520338507,\n",
      "        Epochs: 12\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.003896034090757894,\n",
      "        Training Loss: 0.00469309159781936,\n",
      "        Argmax Binary Validation Accuracy: 0.9794520547945206,\n",
      "        Argmax Binary Training Accuracy: 0.979947192884936,\n",
      "        Custom Metric: 0.004294562844288627,\n",
      "        Epochs: 13\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.00387666389133301,\n",
      "        Training Loss: 0.004250970222975457,\n",
      "        Argmax Binary Validation Accuracy: 0.9842046407604138,\n",
      "        Argmax Binary Training Accuracy: 0.9806559199555308,\n",
      "        Custom Metric: 0.0040638170571542336,\n",
      "        Epochs: 14\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.004330317426592956,\n",
      "        Training Loss: 0.004196997777765421,\n",
      "        Argmax Binary Validation Accuracy: 0.9802907464355606,\n",
      "        Argmax Binary Training Accuracy: 0.98118399110617,\n",
      "        Custom Metric: 0.004396977251006723,\n",
      "        Epochs: 15\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.0034029905641546065,\n",
      "        Training Loss: 0.0034379149740924224,\n",
      "        Argmax Binary Validation Accuracy: 0.985602460162147,\n",
      "        Argmax Binary Training Accuracy: 0.982698721511951,\n",
      "        Custom Metric: 0.0034204527691235145,\n",
      "        Epochs: 16\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.0034625527164280356,\n",
      "        Training Loss: 0.0032283473119378843,\n",
      "        Argmax Binary Validation Accuracy: 0.9815487838971205,\n",
      "        Argmax Binary Training Accuracy: 0.9824485825458588,\n",
      "        Custom Metric: 0.003579655418673111,\n",
      "        Epochs: 17\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.0025857615109998733,\n",
      "        Training Loss: 0.003306227858229957,\n",
      "        Argmax Binary Validation Accuracy: 0.987279843444227,\n",
      "        Argmax Binary Training Accuracy: 0.9824485825458588,\n",
      "        Custom Metric: 0.002945994684614915,\n",
      "        Epochs: 18\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.0028512465842140955,\n",
      "        Training Loss: 0.003021835250954836,\n",
      "        Argmax Binary Validation Accuracy: 0.9846239865809338,\n",
      "        Argmax Binary Training Accuracy: 0.9837409672040022,\n",
      "        Custom Metric: 0.0029365409175844655,\n",
      "        Epochs: 19\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.002226924099431926,\n",
      "        Training Loss: 0.0025716449307542338,\n",
      "        Argmax Binary Validation Accuracy: 0.9875594073245737,\n",
      "        Argmax Binary Training Accuracy: 0.9855197331851029,\n",
      "        Custom Metric: 0.00239928451509308,\n",
      "        Epochs: 20\n",
      "        \n",
      "\n",
      "        Validation Loss: 0.002442108838522472,\n",
      "        Training Loss: 0.002486603485523625,\n",
      "        Argmax Binary Validation Accuracy: 0.9874196253844003,\n",
      "        Argmax Binary Training Accuracy: 0.9847554196775987,\n",
      "        Custom Metric: 0.0024643561620230486,\n",
      "        Epochs: 21\n",
      "        \n",
      "Best Validation Loss: 0.002226924099431926, Best Validation accuracy: 0.9874196253844003\n"
     ]
    }
   ],
   "source": [
    "# best_config = best_trial.config\n",
    "\n",
    "default_config = {'dropout_rate': 0.2, 'batch_size': 8, 'weight_decay': 2e-06, 'lr': 5e-05, 'epochs': 15}\n",
    "\n",
    "# best_config = best_trial.config\n",
    "\n",
    "try:\n",
    "    best_trial = analysis.get_best_trial(\"loss\", \"min\", \"last\")\n",
    "except NameError:\n",
    "    best_trial = None  # Ensure best_trial is always defined\n",
    "\n",
    "# Check if best_trial exists and has a valid config, otherwise use default\n",
    "if best_trial and hasattr(best_trial, \"config\") and best_trial.config:\n",
    "    best_config = best_trial.config\n",
    "else:\n",
    "    best_config = default_config\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Train the model with the best configuration\n",
    "best_model, best_model_path = train_best_model(best_config, device, train_ds_pd, validation_ds_pd)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd11fac0",
   "metadata": {
    "papermill": {
     "duration": 0.020425,
     "end_time": "2025-03-02T20:21:36.687867",
     "exception": false,
     "start_time": "2025-03-02T20:21:36.667442",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save the best model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "f58001ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:36.730971Z",
     "iopub.status.busy": "2025-03-02T20:21:36.730678Z",
     "iopub.status.idle": "2025-03-02T20:21:37.946197Z",
     "shell.execute_reply": "2025-03-02T20:21:37.945138Z"
    },
    "papermill": {
     "duration": 1.238758,
     "end_time": "2025-03-02T20:21:37.947459",
     "exception": false,
     "start_time": "2025-03-02T20:21:36.708701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best model saved at: /kaggle/working/final_best_model.pt\n"
     ]
    }
   ],
   "source": [
    "# Save the best model\n",
    "#### Comment when wanting to select the model which is stopped early to avoid over or under fitting\n",
    "\n",
    "# final_model_path = \"/kaggle/working/final_best_model.pt\"\n",
    "# torch.save(best_model.state_dict(), final_model_path) \n",
    "\n",
    "#### Comment when wanting to select the model which is stopped early to avoid over or under fitting\n",
    "\n",
    "final_model_path = \"/kaggle/working/final_best_model.pt\"\n",
    "# torch.save(best_model.state_dict(), final_model_path)\n",
    "torch.save({'model_state_dict': best_model.state_dict(),'config': best_config}, final_model_path)\n",
    "\n",
    "print(f\"Best model saved at: {final_model_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "418a8f09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:37.988761Z",
     "iopub.status.busy": "2025-03-02T20:21:37.988496Z",
     "iopub.status.idle": "2025-03-02T20:21:37.991499Z",
     "shell.execute_reply": "2025-03-02T20:21:37.990876Z"
    },
    "papermill": {
     "duration": 0.024467,
     "end_time": "2025-03-02T20:21:37.992557",
     "exception": false,
     "start_time": "2025-03-02T20:21:37.968090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# best_model = EmotionModel(\n",
    "#     roberta_model=RobertaModel.from_pretrained(\"roberta-base\"),\n",
    "#     n_classes=7,\n",
    "#     dropout_rate=best_trial.config[\"dropout_rate\"]\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "7ff9153e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:38.033163Z",
     "iopub.status.busy": "2025-03-02T20:21:38.032954Z",
     "iopub.status.idle": "2025-03-02T20:21:38.035710Z",
     "shell.execute_reply": "2025-03-02T20:21:38.035108Z"
    },
    "papermill": {
     "duration": 0.024234,
     "end_time": "2025-03-02T20:21:38.036779",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.012545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# kaggle_working_dir = '/kaggle/working'\n",
    "# best_model_path = os.path.join(kaggle_working_dir, \"checkpoint.pt\")\n",
    "# best_model.load_state_dict(torch.load(best_model_path))\n",
    "# best_model.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0ec23d58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:38.077366Z",
     "iopub.status.busy": "2025-03-02T20:21:38.077149Z",
     "iopub.status.idle": "2025-03-02T20:21:38.079780Z",
     "shell.execute_reply": "2025-03-02T20:21:38.079210Z"
    },
    "papermill": {
     "duration": 0.02423,
     "end_time": "2025-03-02T20:21:38.081009",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.056779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # best_config = result.get_best_config(metric='accuracy', mode='max')\n",
    "# # best_trial = result.get_best_trial(metric='accuracy', mode='max')\n",
    "\n",
    "# best_config = result.get_best_config(metric='custom_metric', mode='min')\n",
    "# best_trial = result.get_best_trial(metric='custom_metric', mode='min')\n",
    "\n",
    "# print(f\"Best trial config: {best_trial.config}\")\n",
    "# print(f\"Best trial final validation loss: {best_trial.last_result['loss']}\")\n",
    "# print(f\"Best trial final validation accuracy: {best_trial.last_result['accuracy']}\")\n",
    "\n",
    "# print(\"\\nModel Parameters:\")\n",
    "# for name, param in best_model.named_parameters():\n",
    "#     print(f\"{name}: {param.size()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "c87c3b0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:38.121388Z",
     "iopub.status.busy": "2025-03-02T20:21:38.121178Z",
     "iopub.status.idle": "2025-03-02T20:21:38.123952Z",
     "shell.execute_reply": "2025-03-02T20:21:38.123329Z"
    },
    "papermill": {
     "duration": 0.024216,
     "end_time": "2025-03-02T20:21:38.125021",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.100805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# best_trial = tuner.get_best_trial(\"loss\", \"min\", \"last\")\n",
    "# print(f\"Best trial config: {best_trial.config}\")\n",
    "# print(f\"Best trial final validation loss: {best_trial.last_result['loss']}\")\n",
    "# print(f\"Best trial final validation accuracy: {best_trial.last_result['accuracy']}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "07922672",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:38.165608Z",
     "iopub.status.busy": "2025-03-02T20:21:38.165400Z",
     "iopub.status.idle": "2025-03-02T20:21:38.168021Z",
     "shell.execute_reply": "2025-03-02T20:21:38.167448Z"
    },
    "papermill": {
     "duration": 0.024264,
     "end_time": "2025-03-02T20:21:38.169300",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.145036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Load the best model\n",
    "# best_model = EmotionModel(\n",
    "#     roberta_model=RobertaModel.from_pretrained(\"roberta-base\"),\n",
    "#     n_classes=7,\n",
    "#     dropout_rate=best_trial.config[\"dropout_rate\"]\n",
    "# )\n",
    "\n",
    "# best_model_path = os.path.join(best_checkpoint_dir, \"checkpoint.pt\")\n",
    "# best_model.load_state_dict(torch.load(best_model_path))\n",
    "# best_model.eval()\n",
    "\n",
    "# print(f\"Best trial config: {best_trial.config}\")\n",
    "# print(f\"Best trial final validation loss: {best_trial.last_result['loss']}\")\n",
    "# print(f\"Best trial final validation accuracy: {best_trial.last_result['accuracy']}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "bbdf0129",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:38.210102Z",
     "iopub.status.busy": "2025-03-02T20:21:38.209895Z",
     "iopub.status.idle": "2025-03-02T20:21:38.212435Z",
     "shell.execute_reply": "2025-03-02T20:21:38.211867Z"
    },
    "papermill": {
     "duration": 0.024182,
     "end_time": "2025-03-02T20:21:38.213588",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.189406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Save the best model\n",
    "# best_model = EmotionClassifier(hidden_size=best_config['hidden_size'], dropout_rate=best_config['dropout_rate']).to(device)\n",
    "# checkpoint_path = \"best_model.pth\"\n",
    "# torch.save(best_model.state_dict(), checkpoint_path)\n",
    "# print(f\"Best model saved to {checkpoint_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "a149c144",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:38.254601Z",
     "iopub.status.busy": "2025-03-02T20:21:38.254403Z",
     "iopub.status.idle": "2025-03-02T20:21:38.256935Z",
     "shell.execute_reply": "2025-03-02T20:21:38.256355Z"
    },
    "papermill": {
     "duration": 0.024438,
     "end_time": "2025-03-02T20:21:38.258195",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.233757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Save the best model\n",
    "# best_model = EmotionClassifier(hidden_size=best_config['hidden_size'], dropout_rate=best_config['dropout_rate']).to(device)\n",
    "# bestmodel_path = f\"/kaggle/working/bestmodel.pt\"\n",
    "# torch.save(best_model.state_dict(), checkpoint_path)\n",
    "# print(f\"Best model saved to {bestmodel_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b144dbca",
   "metadata": {
    "papermill": {
     "duration": 0.020381,
     "end_time": "2025-03-02T20:21:38.299938",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.279557",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load the best model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "98908a04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:38.340719Z",
     "iopub.status.busy": "2025-03-02T20:21:38.340485Z",
     "iopub.status.idle": "2025-03-02T20:21:45.979315Z",
     "shell.execute_reply": "2025-03-02T20:21:45.978077Z"
    },
    "papermill": {
     "duration": 7.660856,
     "end_time": "2025-03-02T20:21:45.980881",
     "exception": false,
     "start_time": "2025-03-02T20:21:38.320025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-74-bcb45608d895>:6: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  checkpoint = torch.load(final_model_path)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded model from /kaggle/working/final_best_model.pt for inference.\n"
     ]
    }
   ],
   "source": [
    "# Load the best model\n",
    "final_model_path = \"/kaggle/working/final_best_model.pt\"\n",
    "# final_model_path = \"/kaggle/input/tachygraphy-lv2-emotion-moodtags-v1/transformers/default/1/final_best_model.pt\"\n",
    "\n",
    "\n",
    "checkpoint = torch.load(final_model_path)\n",
    "config = checkpoint['config']\n",
    "\n",
    "# loaded_model = EmotionModel(\n",
    "#     roberta_model=RobertaModel.from_pretrained(\"roberta-base\"),\n",
    "#     n_classes=7,\n",
    "#     dropout_rate=config[\"dropout_rate\"]\n",
    "# )\n",
    "loaded_model = EmotionModel(\n",
    "    roberta_model=DebertaV2Model.from_pretrained('microsoft/deberta-v3-base'),\n",
    "    n_classes=7,\n",
    "    dropout_rate=config[\"dropout_rate\"]\n",
    ")\n",
    "loaded_model.load_state_dict(checkpoint['model_state_dict'])\n",
    "loaded_model = loaded_model.to(device)\n",
    "loaded_model.eval()\n",
    "\n",
    "print(f\"Loaded model from {final_model_path} for inference.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a215444",
   "metadata": {
    "papermill": {
     "duration": 0.01995,
     "end_time": "2025-03-02T20:21:46.021722",
     "exception": false,
     "start_time": "2025-03-02T20:21:46.001772",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# PREDICT ON RANDOM INPUT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2c91568",
   "metadata": {
    "papermill": {
     "duration": 0.019636,
     "end_time": "2025-03-02T20:21:46.061899",
     "exception": false,
     "start_time": "2025-03-02T20:21:46.042263",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Prediction Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "800e65d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:46.103066Z",
     "iopub.status.busy": "2025-03-02T20:21:46.102751Z",
     "iopub.status.idle": "2025-03-02T20:21:46.107962Z",
     "shell.execute_reply": "2025-03-02T20:21:46.107328Z"
    },
    "papermill": {
     "duration": 0.027208,
     "end_time": "2025-03-02T20:21:46.109160",
     "exception": false,
     "start_time": "2025-03-02T20:21:46.081952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict(text, model, tokenizer, device, max_len=128):\n",
    "    inputs = tokenizer.encode_plus(\n",
    "        text,\n",
    "        None,\n",
    "        add_special_tokens=True,\n",
    "        max_length=max_len,\n",
    "        padding='max_length',\n",
    "        truncation=True,\n",
    "        return_token_type_ids=False,\n",
    "        return_tensors='pt'\n",
    "    )\n",
    "    input_ids = inputs['input_ids']\n",
    "    attention_mask = inputs['attention_mask']\n",
    "    \n",
    "    input_ids = input_ids.to(device)\n",
    "    attention_mask = attention_mask.to(device)\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "    \n",
    "    return torch.sigmoid(outputs).cpu().numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "afab95ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:46.150065Z",
     "iopub.status.busy": "2025-03-02T20:21:46.149805Z",
     "iopub.status.idle": "2025-03-02T20:21:46.160259Z",
     "shell.execute_reply": "2025-03-02T20:21:46.159423Z"
    },
    "papermill": {
     "duration": 0.032262,
     "end_time": "2025-03-02T20:21:46.161546",
     "exception": false,
     "start_time": "2025-03-02T20:21:46.129284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_model = loaded_model\n",
    "best_model = best_model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "682cbf86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:46.202270Z",
     "iopub.status.busy": "2025-03-02T20:21:46.202067Z",
     "iopub.status.idle": "2025-03-02T20:21:46.954521Z",
     "shell.execute_reply": "2025-03-02T20:21:46.953859Z"
    },
    "papermill": {
     "duration": 0.774375,
     "end_time": "2025-03-02T20:21:46.956113",
     "exception": false,
     "start_time": "2025-03-02T20:21:46.181738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a640f43a",
   "metadata": {
    "papermill": {
     "duration": 0.02018,
     "end_time": "2025-03-02T20:21:46.997625",
     "exception": false,
     "start_time": "2025-03-02T20:21:46.977445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Samples & Random Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "2e74a686",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:47.039456Z",
     "iopub.status.busy": "2025-03-02T20:21:47.039191Z",
     "iopub.status.idle": "2025-03-02T20:21:48.737927Z",
     "shell.execute_reply": "2025-03-02T20:21:48.737058Z"
    },
    "papermill": {
     "duration": 1.721271,
     "end_time": "2025-03-02T20:21:48.739254",
     "exception": false,
     "start_time": "2025-03-02T20:21:47.017983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted emotions for 'hey! hru, wanna ply valo toni8?': [[0.03319598 0.01279807 0.00801688 0.06904113 0.30369765 0.03336444\n",
      "  0.50008565]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<head><meta charset=\"utf-8\" /></head>\n",
       "<body>\n",
       "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
       "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"71f5a695-e49a-446c-8b95-366512a9ccef\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"71f5a695-e49a-446c-8b95-366512a9ccef\")) {                    Plotly.newPlot(                        \"71f5a695-e49a-446c-8b95-366512a9ccef\",                        [{\"hovertemplate\":\"r=%{r}\\u003cbr\\u003etheta=%{theta}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"r\":[0.03319598,0.012798065,0.008016881,0.069041125,0.30369765,0.03336444,0.50008565,0.03319598],\"showlegend\":false,\"subplot\":\"polar\",\"theta\":[\"anger\",\"disgust\",\"fear\",\"joy\",\"neutral\",\"sadness\",\"surprise\",\"anger\"],\"type\":\"scatterpolar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"polar\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"angularaxis\":{\"direction\":\"clockwise\",\"rotation\":90}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('71f5a695-e49a-446c-8b95-366512a9ccef');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                            </script>        </div>\n",
       "</body>\n",
       "</html>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_text = \"hey! hru, wanna ply valo toni8?\"\n",
    "predictions = predict(sample_text, best_model, tokenizer, device, max_len=128)\n",
    "print(f\"Predicted emotions for '{sample_text}': {predictions}\")\n",
    "\n",
    "\n",
    "predictions_array = predictions.squeeze()  # Remove unnecessary dimensions\n",
    "\n",
    "emotion_moodtags = []\n",
    "for items in predictions_array:\n",
    "    emotion_moodtags.append(items)\n",
    "\n",
    "fig = px.line_polar(pd.DataFrame(dict(r=emotion_moodtags, theta=EMOTION_LABELS)), r='r', theta='theta', line_close=True)\n",
    "fig.show()\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "# Since predictions are probabilistic values, normalize to ensure they sum up to 1\n",
    "normalized_predictions = predictions_array / predictions_array.sum()  # Normalize the values\n",
    "\n",
    "\n",
    "## Horizontal Stacked Bar Plot\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15, 5))\n",
    "\n",
    "left = 0\n",
    "for i in range(len(normalized_predictions)):\n",
    "    ax.barh(0, normalized_predictions[i], color=plt.cm.tab10(i), left=left, label=EMOTION_LABELS[i])\n",
    "    left += normalized_predictions[i]\n",
    "\n",
    "# Add legend\n",
    "ax.set_xlim(0, 1)\n",
    "ax.set_yticks([])\n",
    "ax.set_xticks(np.arange(0, 1.1, 0.1))\n",
    "ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=len(EMOTION_LABELS))\n",
    "\n",
    "# Add title\n",
    "plt.title('Emotion Prediction Distribution')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "aa87cf74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:48.784294Z",
     "iopub.status.busy": "2025-03-02T20:21:48.784027Z",
     "iopub.status.idle": "2025-03-02T20:21:49.790786Z",
     "shell.execute_reply": "2025-03-02T20:21:49.789930Z"
    },
    "papermill": {
     "duration": 1.031682,
     "end_time": "2025-03-02T20:21:49.792742",
     "exception": false,
     "start_time": "2025-03-02T20:21:48.761060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted emotions for 'what a badass char is arthur, he is the best game char ever made, i luv rdr2': [[1.2129575e-03 6.3621119e-04 8.0212828e-04 9.2649901e-01 1.8263860e-02\n",
      "  3.4596007e-03 5.5234190e-02]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<head><meta charset=\"utf-8\" /></head>\n",
       "<body>\n",
       "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
       "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"cbc5088f-4fe1-4262-bbe6-26839eae00e0\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"cbc5088f-4fe1-4262-bbe6-26839eae00e0\")) {                    Plotly.newPlot(                        \"cbc5088f-4fe1-4262-bbe6-26839eae00e0\",                        [{\"hovertemplate\":\"r=%{r}\\u003cbr\\u003etheta=%{theta}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"r\":[0.0012129575,0.0006362112,0.0008021283,0.926499,0.01826386,0.0034596007,0.05523419,0.0012129575],\"showlegend\":false,\"subplot\":\"polar\",\"theta\":[\"anger\",\"disgust\",\"fear\",\"joy\",\"neutral\",\"sadness\",\"surprise\",\"anger\"],\"type\":\"scatterpolar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"polar\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"angularaxis\":{\"direction\":\"clockwise\",\"rotation\":90}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('cbc5088f-4fe1-4262-bbe6-26839eae00e0');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                            </script>        </div>\n",
       "</body>\n",
       "</html>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABLQAAAHeCAYAAACCDFI4AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABEKklEQVR4nO3de5gWZf0/8M+ysMuynBEEviJnEJGDQhAegBQiRQLtq2WpYJ7yAKmBaSQnTYxMJRQ8Q0WGqWB9PSCgYoKmlGAqSIAglihmAnKQw+78/vDi+bFyXGR3GXq9rmuvi2eee2Y+M/czzw7vnbknK0mSJAAAAAAgJcqVdQEAAAAAUBwCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AICIiVqxYEVlZWTFp0qSyLqXU7WrbR4wYEVlZWQdsHbNnz46srKyYPXv2AVtmSWrUqFEMGDCgxNezq30/YMCAqFy5comve7usrKwYMWJEqa0PAPjyBFoAUIImTZoUWVlZu/35y1/+Uuo1PfTQQ3HHHXeU+nr3ZMCAAUX2S9WqVaNdu3bxy1/+MjZv3lzW5RXL+PHjD7pQsHv37pl9W65cuahatWq0bNkyzjvvvJg5c+YBW89TTz110AZDB3NtAEDxlS/rAgDgv8GoUaOicePGO01v1qxZqdfy0EMPxZtvvhlXXXVVkekNGzaMTZs2RYUKFUq9poiI3NzcuP/++yMiYs2aNfHYY4/F4MGDY968eTFlypRSr+enP/1pXHfddcWeb/z48XHYYYftdHVT165dY9OmTZGTk3OAKiyeI444IkaPHh0RERs2bIilS5fG1KlTY/LkyXH22WfH5MmTi/T94sWLo1y54v3t86mnnoq77rqrWMFRaX3u9lTbpk2bonx5p8UAkCZ+cwNAKTj11FOjY8eOZV3GHmVlZUXFihXLbP3ly5ePc889N/P68ssvj86dO8fDDz8ct912W9SvX3+neZIkic8++yzy8vJKpJ4DGXKUK1euTPdvtWrViuzfiIhbbrklBg0aFOPHj49GjRrFz3/+88x7ubm5JVrPtm3borCwMHJycsp0v0REma8fACg+txwCwEFg+zhCt956a9x1113RpEmTqFSpUnz961+P9957L5IkiRtvvDGOOOKIyMvLi759+8Z//vOfnZYzfvz4aN26deTm5kb9+vXjiiuuiDVr1mTe7969ezz55JPx7rvvZm5Ba9SoUZEavni73HPPPRcnnXRS5OfnR/Xq1aNv376xaNGiIm22jze1dOnSGDBgQFSvXj2qVasWF1xwQWzcuHG/9km5cuWie/fumdoiPh/X6fTTT49nnnkmOnbsGHl5eXHPPfdExOdXdV111VXRoEGDyM3NjWbNmsXPf/7zKCwsLLLcNWvWxIABA6JatWpRvXr16N+/f5F99MVt+qLJkydHp06dolKlSlGjRo3o2rVrzJgxI1PfW2+9FS+88EJm/27fht2NofXII49Ehw4dIi8vLw477LA499xz41//+leRNtvHlPrXv/4V/fr1i8qVK0ft2rVj8ODBUVBQUMw9+/9lZ2fHr371qzj66KPjzjvvjLVr12be++IYWlu3bo2RI0dG8+bNo2LFilGrVq048cQTM7csDhgwIO66666IiCK3j0YU/Xzfcccd0bRp08jNzY2FCxfucey2d955J3r16hX5+flRv379GDVqVCRJknl/d/v0i8vcU23bp33xyq358+fHqaeeGlWrVo3KlSvHKaecstMtwttvKZ47d25cc801Ubt27cjPz48zzjgjPvroo713AACw31yhBQClYO3atfHvf/+7yLSsrKyoVatWkWm/+93vYsuWLTFw4MD4z3/+E2PGjImzzz47Tj755Jg9e3b8+Mc/jqVLl8a4ceNi8ODB8eCDD2bmHTFiRIwcOTJ69OgRl112WSxevDgmTJgQ8+bNi7lz50aFChVi6NChsXbt2vjnP/8Zt99+e0TEHgffnjVrVpx66qnRpEmTGDFiRGzatCnGjRsXJ5xwQrz22muZMGy7s88+Oxo3bhyjR4+O1157Le6///6oU6dOkSt/imPZsmUREUX20+LFi+Occ86JSy+9NC6++OJo2bJlbNy4Mbp16xb/+te/4tJLL40jjzwyXnrppbj++utj1apVmTHDkiSJvn37xpw5c+IHP/hBtGrVKqZNmxb9+/ffp3pGjhwZI0aMiOOPPz5GjRoVOTk58corr8Rzzz0XX//61+OOO+6IgQMHRuXKlWPo0KEREXH44YfvdnmTJk2KCy64IL7yla/E6NGj48MPP4yxY8fG3LlzY/78+VG9evVM24KCgujVq1d07tw5br311pg1a1b88pe/jKZNm8Zll11WzD37/2VnZ8c555wTN9xwQ8yZMyd69+69y3YjRoyI0aNHx0UXXRSdOnWKdevWxV//+td47bXXomfPnnHppZfG+++/HzNnzozf/va3u1zGxIkT47PPPotLLrkkcnNzo2bNmjsFjjtu7ze+8Y346le/GmPGjInp06fH8OHDY9u2bTFq1KhibeO+1Lajt956K0466aSoWrVqXHvttVGhQoW45557onv37vHCCy9E586di7QfOHBg1KhRI4YPHx4rVqyIO+64I6688sp4+OGHi1UnAFAMCQBQYiZOnJhExC5/cnNzM+2WL1+eRERSu3btZM2aNZnp119/fRIRSbt27ZKtW7dmpp9zzjlJTk5O8tlnnyVJkiSrV69OcnJykq9//etJQUFBpt2dd96ZRETy4IMPZqb17t07adiw4U61bq9h4sSJmWnt27dP6tSpk3z88ceZaa+//npSrly55Pzzz89MGz58eBIRyfe///0iyzzjjDOSWrVq7XU/9e/fP8nPz08++uij5KOPPkqWLl2a3HzzzUlWVlbStm3bTLuGDRsmEZFMnz69yPw33nhjkp+fn/zjH/8oMv26665LsrOzk5UrVyZJkiSPP/54EhHJmDFjMm22bduWnHTSSTtt+/Zt2m7JkiVJuXLlkjPOOKPIPk6SJCksLMz8u3Xr1km3bt122sbnn38+iYjk+eefT5IkSbZs2ZLUqVMnOeaYY5JNmzZl2j3xxBNJRCTDhg0rsn8iIhk1alSRZR577LFJhw4ddlrXF3Xr1i1p3br1bt+fNm1aEhHJ2LFjM9MaNmyY9O/fP/O6Xbt2Se/evfe4niuuuCLZ1enl9s9W1apVk9WrV+/yvR33/fbtHThwYGZaYWFh0rt37yQnJyf56KOPkiTZeZ/uaZm7qy1JkiQikuHDh2de9+vXL8nJyUmWLVuWmfb+++8nVapUSbp27ZqZtv347tGjR5HPwNVXX51kZ2cXOZYBgAPLLYcAUAruuuuumDlzZpGfp59+eqd2Z511VlSrVi3zevuVIOeee26R8Zw6d+4cW7ZsydyaNmvWrNiyZUtcddVVRQbyvvjii6Nq1arx5JNPFrvmVatWxYIFC2LAgAFRs2bNzPS2bdtGz54946mnntppnh/84AdFXp900knx8ccfx7p16/a6vg0bNkTt2rWjdu3a0axZs/jJT34SXbp0iWnTphVp17hx4+jVq1eRaY888kicdNJJUaNGjfj3v/+d+enRo0cUFBTEn//854j4fGDw8uXLF7miKTs7OwYOHLjX+h5//PEoLCyMYcOG7TRY+q5uTdybv/71r7F69eq4/PLLi4zh1Lt37zjqqKN22We72r/vvPNOsdf9Rduv0vv0009326Z69erx1ltvxZIlS/Z7Pd/61reidu3a+9z+yiuvzPw7KysrrrzyytiyZUvMmjVrv2vYm4KCgpgxY0b069cvmjRpkpler169+O53vxtz5szZ6fN8ySWXFPkMnHTSSVFQUBDvvvtuidUJAP/t3HIIAKWgU6dO+zQo/JFHHlnk9fZwq0GDBruc/sknn0REZP7j3LJlyyLtcnJyokmTJvv1H+vdLTMiolWrVvHMM8/Ehg0bIj8/f7f116hRI1Nn1apV97i+ihUrxv/93/9FxOcDkjdu3DiOOOKIndrt6mmRS5Ysib///e+7DUtWr16d2aZ69ertdJvlrrbxi5YtWxblypWLo48+eq9t98We9u9RRx0Vc+bMKTKtYsWKO21fjRo1Mp+BL2P9+vUREVGlSpXdthk1alT07ds3WrRoEcccc0x84xvfiPPOOy/atm27z+vZVd/tTrly5YoEShERLVq0iIj/P6ZaSfjoo49i48aNu/3cFxYWxnvvvRetW7fOTN/T5x4AKBkCLQA4iGRnZxdrerLDANkHgy9TZ3Z2dvTo0WOv7Xb1RMPCwsLo2bNnXHvttbucZ3sQkma727cHwptvvhkREc2aNdttm65du8ayZcvij3/8Y8yYMSPuv//+uP322+Puu++Oiy66aJ/Wc6CfRrm7K+O+zED5+yMtxycAHErccggAh4CGDRtGxOcDpu9oy5YtsXz58sz7Eft+e9zulhkR8fbbb8dhhx1W5OqsstS0adNYv3599OjRY5c/26+gadiwYaxatSpzRdJ2u9rGXa2jsLAwFi5cuMd2B2L/Ll68uEiflaSCgoJ46KGHolKlSnHiiSfusW3NmjXjggsuiN///vfx3nvvRdu2bYs8HXB/br3cncLCwp1up/zHP/4REZF5GMH2K6G++JTKXV2RuK+11a5dOypVqrTbz325cuV2umISACh9Ai0AOAT06NEjcnJy4le/+lWRq0IeeOCBWLt2bZEn1+Xn58fatWv3usx69epF+/bt49e//nWRwODNN9+MGTNmxGmnnXZAt+HLOPvss+Pll1+OZ555Zqf31qxZE9u2bYuIiNNOOy22bdsWEyZMyLxfUFAQ48aN2+s6+vXrF+XKlYtRo0bt9GS+Hfd5fn7+TgHLrnTs2DHq1KkTd999d2zevDkz/emnn45Fixbt9mmDB1JBQUEMGjQoFi1aFIMGDdrjbaEff/xxkdeVK1eOZs2aFal9e8C5L9u/L+68887Mv5MkiTvvvDMqVKgQp5xySkR8HgpmZ2dnxkjbbvz48Tsta19ry87Ojq9//evxxz/+scitjR9++GE89NBDceKJJ+719lkAoOS55RAASsHTTz8db7/99k7Tjz/++J3GCdoftWvXjuuvvz5GjhwZ3/jGN+Kb3/xmLF68OMaPHx9f+cpX4txzz8207dChQzz88MNxzTXXxFe+8pWoXLly9OnTZ5fL/cUvfhGnnnpqdOnSJS688MLYtGlTjBs3LqpVq1bkypyyNmTIkPjTn/4Up59+egwYMCA6dOgQGzZsiDfeeCMeffTRWLFiRRx22GHRp0+fOOGEE+K6666LFStWxNFHHx1Tp07dp4CvWbNmMXTo0LjxxhvjpJNOijPPPDNyc3Nj3rx5Ub9+/Rg9enREfL5/J0yYEDfddFM0a9Ys6tSpEyeffPJOy6tQoUL8/Oc/jwsuuCC6desW55xzTnz44YcxduzYaNSoUVx99dUHdB+tXbs2Jk+eHBERGzdujKVLl8bUqVNj2bJl8Z3vfCduvPHGPc5/9NFHR/fu3aNDhw5Rs2bN+Otf/xqPPvpokYHbO3ToEBERgwYNil69ekV2dnZ85zvf2a96K1asGNOnT4/+/ftH586d4+mnn44nn3wyfvKTn2TGEqtWrVqcddZZMW7cuMjKyoqmTZvGE088kRkzbUfFqe2mm26KmTNnxoknnhiXX355lC9fPu65557YvHlzjBkzZr+2BwA4sARaAFAKhg0btsvpEydOPCCBVkTEiBEjonbt2nHnnXfG1VdfHTVr1oxLLrkkbr755qhQoUKm3eWXXx4LFiyIiRMnxu233x4NGzbcbaDVo0ePmD59egwfPjyGDRsWFSpUiG7dusXPf/7zYg3wXdIqVaoUL7zwQtx8883xyCOPxG9+85uoWrVqtGjRIkaOHJkZRL9cuXLxpz/9Ka666qqYPHlyZGVlxTe/+c345S9/Gccee+xe1zNq1Kho3LhxjBs3LoYOHRqVKlWKtm3bxnnnnZdpM2zYsHj33XdjzJgx8emnn0a3bt12GWhFRAwYMCAqVaoUt9xyS/z4xz+O/Pz8OOOMM+LnP/95VK9e/YDsm+3++c9/ZuqsXLly1KtXL7p06RITJkyInj177nX+QYMGxZ/+9KeYMWNGbN68ORo2bBg33XRTDBkyJNPmzDPPjIEDB8aUKVNi8uTJkSTJfgda2dnZMX369LjssstiyJAhUaVKlczncEfjxo2LrVu3xt133x25ublx9tlnxy9+8Ys45phjirQrTm2tW7eOF198Ma6//voYPXp0FBYWRufOnWPy5MmZJ48CAGUrKzFaJQAAAAApYgwtAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApEr5A73AwsLCeP/996NKlSqRlZV1oBcPAAAAQEokSRKffvpp1K9fP8qVO3DXVR3wQOv999+PBg0aHOjFAgAAAJBS7733XhxxxBEHbHkHPNCqUqVKRHxeaNWqVQ/04gEAAABIiXXr1kWDBg0yedGBcsADre23GVatWlWgBQAAAMABH5bKoPAAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASJXyJbbk0UdEm6Maxh9GbyuxVQAAAAB8Wc91v+uAL/OzT24r8vrbjX98wNeRBp9u3lAiy3WFFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCpZSZIkB3KB69ati2rVqsXatWujatWqB3LRAAAAAKRISeVErtACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKlS/kAvMEmSiIhYt27dgV40AAAAACmyPR/anhcdKAc80Pr4448jIqJBgwYHetEAAAAApNDHH38c1apVO2DLO+CBVs2aNSMiYuXKlQe0UMrGunXrokGDBvHee+9F1apVy7ocviT9eejRp4cW/Xlo0Z+HFv156NGnhxb9eWjRn4eWtWvXxpFHHpnJiw6UAx5olSv3+bBc1apV88E7hFStWlV/HkL056FHnx5a9OehRX8eWvTnoUefHlr056FFfx5atudFB2x5B3RpAAAAAFDCBFoAAAAApMoBD7Ryc3Nj+PDhkZube6AXTRnQn4cW/Xno0aeHFv15aNGfhxb9eejRp4cW/Xlo0Z+HlpLqz6zkQD83EQAAAABKkFsOAQAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApMp+BVp33XVXNGrUKCpWrBidO3eOV199dY/tH3nkkTjqqKOiYsWK0aZNm3jqqaf2q1hKRnH686233opvfetb0ahRo8jKyoo77rij9AplnxSnP++777446aSTokaNGlGjRo3o0aPHXo9nSl9x+nTq1KnRsWPHqF69euTn50f79u3jt7/9bSlWy94U93fodlOmTImsrKzo169fyRZIsRSnPydNmhRZWVlFfipWrFiK1bI3xT0+16xZE1dccUXUq1cvcnNzo0WLFs5zDzLF6dPu3bvvdIxmZWVF7969S7Fi9qS4x+gdd9wRLVu2jLy8vGjQoEFcffXV8dlnn5VStexNcfpz69atMWrUqGjatGlUrFgx2rVrF9OnTy/FatmTP//5z9GnT5+oX79+ZGVlxeOPP77XeWbPnh3HHXdc5ObmRrNmzWLSpEnFX3FSTFOmTElycnKSBx98MHnrrbeSiy++OKlevXry4Ycf7rL93Llzk+zs7GTMmDHJwoULk5/+9KdJhQoVkjfeeKO4q6YEFLc/X3311WTw4MHJ73//+6Ru3brJ7bffXroFs0fF7c/vfve7yV133ZXMnz8/WbRoUTJgwICkWrVqyT//+c9SrpzdKW6fPv/888nUqVOThQsXJkuXLk3uuOOOJDs7O5k+fXopV86uFLc/t1u+fHnyP//zP8lJJ52U9O3bt3SKZa+K258TJ05MqlatmqxatSrz88EHH5Ry1exOcftz8+bNSceOHZPTTjstmTNnTrJ8+fJk9uzZyYIFC0q5cnanuH368ccfFzk+33zzzSQ7OzuZOHFi6RbOLhW3P3/3u98lubm5ye9+97tk+fLlyTPPPJPUq1cvufrqq0u5cnaluP157bXXJvXr10+efPLJZNmyZcn48eOTihUrJq+99lopV86uPPXUU8nQoUOTqVOnJhGRTJs2bY/t33nnnaRSpUrJNddckyxcuDAZN27cfv2fpdiBVqdOnZIrrrgi87qgoCCpX79+Mnr06F22P/vss5PevXsXmda5c+fk0ksvLe6qKQHF7c8dNWzYUKB1kPky/ZkkSbJt27akSpUqya9//euSKpFi+rJ9miRJcuyxxyY//elPS6I8iml/+nPbtm3J8ccfn9x///1J//79BVoHkeL258SJE5Nq1aqVUnUUV3H7c8KECUmTJk2SLVu2lFaJFNOX/R16++23J1WqVEnWr19fUiVSDMXtzyuuuCI5+eSTi0y75pprkhNOOKFE62TfFLc/69Wrl9x5551Fpp155pnJ9773vRKtk+Lbl0Dr2muvTVq3bl1k2re//e2kV69exVpXsW453LJlS/ztb3+LHj16ZKaVK1cuevToES+//PIu53n55ZeLtI+I6NWr127bU3r2pz85eB2I/ty4cWNs3bo1atasWVJlUgxftk+TJIlnn302Fi9eHF27di3JUtkH+9ufo0aNijp16sSFF15YGmWyj/a3P9evXx8NGzaMBg0aRN++feOtt94qjXLZi/3pzz/96U/RpUuXuOKKK+Lwww+PY445Jm6++eYoKCgorbLZgwNxXvTAAw/Ed77zncjPzy+pMtlH+9Ofxx9/fPztb3/L3Mb2zjvvxFNPPRWnnXZaqdTM7u1Pf27evHmn2/Tz8vJizpw5JVorJeNA5UTFCrT+/e9/R0FBQRx++OFFph9++OHxwQcf7HKeDz74oFjtKT37058cvA5Ef/74xz+O+vXr7/TlQtnY3z5du3ZtVK5cOXJycqJ3794xbty46NmzZ0mXy17sT3/OmTMnHnjggbjvvvtKo0SKYX/6s2XLlvHggw/GH//4x5g8eXIUFhbG8ccfH//85z9Lo2T2YH/685133olHH300CgoK4qmnnoobbrghfvnLX8ZNN91UGiWzF1/2vOjVV1+NN998My666KKSKpFi2J/+/O53vxujRo2KE088MSpUqBBNmzaN7t27x09+8pPSKJk92J/+7NWrV9x2222xZMmSKCwsjJkzZ8bUqVNj1apVpVEyB9jucqJ169bFpk2b9nk5nnIIRETELbfcElOmTIlp06YZpDjlqlSpEgsWLIh58+bFz372s7jmmmti9uzZZV0WxfTpp5/GeeedF/fdd18cdthhZV0OB0CXLl3i/PPPj/bt20e3bt1i6tSpUbt27bjnnnvKujT2Q2FhYdSpUyfuvffe6NChQ3z729+OoUOHxt13313WpXEAPPDAA9GmTZvo1KlTWZfCfpo9e3bcfPPNMX78+Hjttddi6tSp8eSTT8aNN95Y1qWxH8aOHRvNmzePo446KnJycuLKK6+MCy64IMqVE2n8NytfnMaHHXZYZGdnx4cfflhk+ocffhh169bd5Tx169YtVntKz/70JwevL9Oft956a9xyyy0xa9asaNu2bUmWSTHsb5+WK1cumjVrFhER7du3j0WLFsXo0aOje/fuJVkue1Hc/ly2bFmsWLEi+vTpk5lWWFgYERHly5ePxYsXR9OmTUu2aHbrQPwOrVChQhx77LGxdOnSkiiRYtif/qxXr15UqFAhsrOzM9NatWoVH3zwQWzZsiVycnJKtGb27Mscoxs2bIgpU6bEqFGjSrJEimF/+vOGG26I8847L3OVXZs2bWLDhg1xySWXxNChQwUhZWh/+rN27drx+OOPx2effRYff/xx1K9fP6677rpo0qRJaZTMAba7nKhq1aqRl5e3z8sp1lGck5MTHTp0iGeffTYzrbCwMJ599tno0qXLLufp0qVLkfYRETNnztxte0rP/vQnB6/97c8xY8bEjTfeGNOnT4+OHTuWRqnsowN1jBYWFsbmzZtLokSKobj9edRRR8Ubb7wRCxYsyPx885vfjK997WuxYMGCaNCgQWmWzxcciOOzoKAg3njjjahXr15Jlck+2p/+POGEE2Lp0qWZoDki4h//+EfUq1dPmHUQ+DLH6COPPBKbN2+Oc889t6TLZB/tT39u3Lhxp9BqewD9+bjVlJUvc3xWrFgx/ud//ie2bdsWjz32WPTt27eky6UEHLCcqHjj1X/+eM3c3Nxk0qRJycKFC5NLLrkkqV69euax0+edd15y3XXXZdrPnTs3KV++fHLrrbcmixYtSoYPH55UqFAheeONN4q7akpAcftz8+bNyfz585P58+cn9erVSwYPHpzMnz8/WbJkSVltAjsobn/ecsstSU5OTvLoo48WeUz1p59+WlabwBcUt09vvvnmZMaMGcmyZcuShQsXJrfeemtSvnz55L777iurTWAHxe3PL/KUw4NLcftz5MiRyTPPPJMsW7Ys+dvf/pZ85zvfSSpWrJi89dZbZbUJ7KC4/bly5cqkSpUqyZVXXpksXrw4eeKJJ5I6deokN910U1ltAl+wv9+5J554YvLtb3+7tMtlL4rbn8OHD0+qVKmS/P73v0/eeeedZMaMGUnTpk2Ts88+u6w2gR0Utz//8pe/JI899liybNmy5M9//nNy8sknJ40bN04++eSTMtoCdvTpp59mcoKISG677bZk/vz5ybvvvpskSZJcd911yXnnnZdp/8477ySVKlVKhgwZkixatCi56667kuzs7GT69OnFWm+xA60kSZJx48YlRx55ZJKTk5N06tQp+ctf/pJ5r1u3bkn//v2LtP/DH/6QtGjRIsnJyUlat26dPPnkk/uzWkpIcfpz+fLlSUTs9NOtW7fSL5xdKk5/NmzYcJf9OXz48NIvnN0qTp8OHTo0adasWVKxYsWkRo0aSZcuXZIpU6aUQdXsTnF/h+5IoHXwKU5/XnXVVZm2hx9+eHLaaaclr732WhlUze4U9/h86aWXks6dOye5ublJkyZNkp/97GfJtm3bSrlq9qS4ffr2228nEZHMmDGjlCtlXxSnP7du3ZqMGDEiadq0aVKxYsWkQYMGyeWXXy4AOYgUpz9nz56dtGrVKsnNzU1q1aqVnHfeecm//vWvMqiaXXn++ed3+f/K7X3Yv3//nTKD559/Pmnfvn2Sk5OTNGnSJJk4cWKx15uVJK63BAAAACA9jIQHAAAAQKoItAAAAABIFYEWAAAAAKlSvqwLAIoqKCiIrVu3lnUZAADAF1SoUCGys7PLugwgBFpw0EiSJD744INYs2ZNWZcCAADsRvXq1aNu3bqRlZVV1qXAfzWBFhwktodZderUiUqVKvkFCQAAB5EkSWLjxo2xevXqiIioV69eGVcE/90EWnAQKCgoyIRZtWrVKutyAACAXcjLy4uIiNWrV0edOnXcfghlyKDwcBDYPmZWpUqVyrgSAABgT7afsxv3FsqWQAsOIm4zBACAg5tzdjg4CLQAAAAASBWBFsB/se7du8dVV10VERGNGjWKO+64o0zroXiSJIlLLrkkatasGVlZWbFgwYKyLum/xoABA6Jfv35lXQYHAd+dpSsrKysef/zxsi6Dg9yIESOiffv2ZV0GUMIMCg8HsUbXPVmq61txS+9SXd8hZUS1Ul7f2gO+yHnz5kV+fv4BX+7+WLFiRTRu3Djmz59fZiekbX7dplTX90b/N4o9z/Tp02PSpEkxe/bsaNKkSRx22GElUFnpW3RUq1JdX6u3FxV7nrFjx0aSJCVQTcm66wfPler6rrj75FJd377o3r17tG/f/pAJoX757dNLbV0/eviJUlsXRf3zuhdLdX1H3HJSqa7vQBs8eHAMHDiwrMsASphACzgkbd26NSpUqFDWZaRK7dq1y7oEimnZsmVRr169OP7440tsHVu2bImcnJwSW35aVatWyiE2pSpJkigoKIjy5Z0qQ1nY398924/dypUrR+XKlUugMuBg4pZD4EuZPn16nHjiiVG9evWoVatWnH766bFs2bKI+Pwqm6ysrJg6dWp87Wtfi0qVKkW7du3i5ZdfLrKM++67Lxo0aBCVKlWKM844I2677baoXr16kTZ//OMf47jjjouKFStGkyZNYuTIkbFt27bM+1lZWTFhwoT45je/Gfn5+fGzn/2sxLc9bTZs2BDnn39+VK5cOerVqxe//OUvi7y/420zSZLEiBEj4sgjj4zc3NyoX79+DBo0KNN21apV0bt378jLy4vGjRvHQw89VGT+7X2/4y1wa9asiaysrJg9e3ZERHzyySfxve99L2rXrh15eXnRvHnzmDhxYkRENG7cOCIijj322MjKyoru3buXyD5JswEDBsTAgQNj5cqVkZWVFY0aNYrCwsIYPXp0NG7cOPLy8qJdu3bx6KOPZuYpKCiICy+8MPN+y5YtY+zYsTstt1+/fvGzn/0s6tevHy1btiztTUuFHW853Lx5cwwaNCjq1KkTFStWjBNPPDHmzZsXEZ8fS82aNYtbb721yPwLFiyIrKysWLp0aWmXflDr3r17DBo0KK699tqoWbNm1K1bN0aMGJF5f82aNXHRRRdF7dq1o2rVqnHyySfH66+/nnl/V7eCXnXVVZnvkAEDBsQLL7wQY8eOjaysrMjKyooVK1bE7NmzIysrK55++uno0KFD5Obmxpw5c2LZsmXRt2/fOPzww6Ny5crxla98JWbNmlUKe+LQ8eijj0abNm0iLy8vatWqFT169IgNGzbEvHnzomfPnnHYYYdFtWrVolu3bvHaa68VmXfJkiXRtWvXqFixYhx99NExc+bMIu/v63nGnDlz4qSTToq8vLxo0KBBDBo0KDZs2JB5f/z48dG8efOoWLFiHH744fG///u/e62fne1uX+04vMF2/fr1iwEDBmReN2rUKG688cY4//zzo2rVqnHJJZdk+nfKlClx/PHHR8WKFeOYY46JF154ITPf7o7dL95yOHv27OjUqVPk5+dH9erV44QTToh333038/7ezjOBg5NAC/hSNmzYENdcc0389a9/jWeffTbKlSsXZ5xxRhQWFmbaDB06NAYPHhwLFiyIFi1axDnnnJM5SZg7d2784Ac/iB/+8IexYMGC6Nmz505h1Isvvhjnn39+/PCHP4yFCxfGPffcE5MmTdqp3YgRI+KMM86IN954I77//e+X/ManzJAhQ+KFF16IP/7xjzFjxoyYPXv2Tv952O6xxx6L22+/Pe65555YsmRJPP7449Gmzf+/Be/888+P999/P2bPnh2PPfZY3HvvvbF69epi1XPDDTfEwoUL4+mnn45FixbFhAkTMrfMvfrqqxERMWvWrFi1alVMnTp1P7f60DV27NgYNWpUHHHEEbFq1aqYN29ejB49On7zm9/E3XffHW+99VZcffXVce6552ZO/gsLC+OII46IRx55JBYuXBjDhg2Ln/zkJ/GHP/yhyLKfffbZWLx4ccycOTOeeMItRntz7bXXxmOPPRa//vWv47XXXotmzZpFr1694j//+U9kZWXF97///UxYu93EiROja9eu0axZszKq+uD161//OvLz8+OVV16JMWPGxKhRozJBxllnnRWrV6+Op59+Ov72t7/FcccdF6ecckr85z//2adljx07Nrp06RIXX3xxrFq1KlatWhUNGjTIvH/dddfFLbfcEosWLYq2bdvG+vXr47TTTotnn3025s+fH9/4xjeiT58+sXLlyhLZ9kPNqlWr4pxzzonvf//7sWjRopg9e3aceeaZkSRJfPrpp9G/f/+YM2dO/OUvf4nmzZvHaaedFp9++mlEfP59deaZZ0ZOTk688sorcffdd8ePf/zjXa5nT+cZy5Yti2984xvxrW99K/7+97/Hww8/HHPmzIkrr7wyIiL++te/xqBBg2LUqFGxePHimD59enTt2nWv9VPUgdhXt956a7Rr1y7mz58fN9xwQ2b6kCFD4kc/+lHMnz8/unTpEn369ImPP/64yLxfPHZ3tG3btujXr19069Yt/v73v8fLL78cl1xySeZJhft6ngkcfFxHDXwp3/rWt4q8fvDBB6N27dqxcOHCzKXegwcPjt69Px+fa+TIkdG6detYunRpHHXUUTFu3Lg49dRTY/DgwRER0aJFi3jppZeK/Cd65MiRcd1110X//v0jIqJJkyZx4403xrXXXhvDhw/PtPvud78bF1xwQYlub1qtX78+HnjggZg8eXKccsopEfH5fxqPOOKIXbZfuXJl1K1bN3r06BEVKlSII488Mjp16hQREW+//XbMmjUr5s2bFx07doyIiPvvvz+aN29erJpWrlwZxx57bGYZjRo1yry3/fbHWrVqRd26dYu13P8W1apViypVqkR2dnbUrVs3Nm/eHDfffHPMmjUrunTpEhGfHytz5syJe+65J7p16xYVKlSIkSNHZpbRuHHjePnll+MPf/hDnH322Znp+fn5cf/997vVcB9s2LAhJkyYEJMmTYpTTz01Ij6/6nTmzJnxwAMPxJAhQ2LAgAExbNiwePXVV6NTp06xdevWeOihh3a6aovPtW3bNvPd3rx587jzzjvj2Wefjby8vHj11Vdj9erVkZubGxGf/wf48ccfj0cffTQuueSSvS67WrVqkZOTE5UqVdrld8uoUaOiZ8+emdc1a9aMdu3aZV7feOONMW3atPjTn/6UCUTYvVWrVsW2bdvizDPPjIYNG0ZEZP44cvLJRcdXu/fee6N69erxwgsvxOmnnx6zZs2Kt99+O5555pmoX79+RETcfPPNmeNsR3s6zxg9enR873vfy1wh1Lx58/jVr34V3bp1iwkTJsTKlSsjPz8/Tj/99KhSpUo0bNgwjj322L3WT1EHYl+dfPLJ8aMf/SjzesWKFRERceWVV2bONydMmBDTp0+PBx54IK699tpM2y8euztat25drF27Nk4//fRo2rRpRES0avX/x2rc1/NM4ODjCi3gS1myZEmcc8450aRJk6hatWomlNjxr9c7/qWsXr16ERGZq3kWL16cCUq2++Lr119/PUaNGpUZD6Fy5cqZv65v3Lgx0257MMLOli1bFlu2bInOnTtnptWsWXO3t5OdddZZsWnTpmjSpElcfPHFMW3atMxfuxcvXhzly5eP4447LtO+WbNmUaNGjWLVdNlll8WUKVOiffv2ce2118ZLL720H1vGdkuXLo2NGzdGz549ixwrv/nNbzK3AUdE3HXXXdGhQ4eoXbt2VK5cOe69996drjZp06aNMGsfLVu2LLZu3RonnHBCZlqFChWiU6dOsWjR54PN169fP3r37h0PPvhgRET83//9X2zevDnOOuusMqn5YPfFqyvq1asXq1evjtdffz3Wr18ftWrVKvIZX758eZHP+Jfxxd8j69evj8GDB0erVq2ievXqUbly5Vi0aJErtPZRu3bt4pRTTok2bdrEWWedFffdd1988sknERHx4YcfxsUXXxzNmzePatWqRdWqVWP9+vWZfbto0aJo0KBBJsyKiExY/0V7Os94/fXXY9KkSUU+M7169YrCwsJYvnx59OzZMxo2bBhNmjSJ8847L373u99lzi32VD9FHYh9tbvzuB37vXz58tGxY8fM9+ve5o34/HxnwIAB0atXr+jTp0+MHTs2Vq1alXl/X88zgYOPQAv4Uvr06RP/+c9/4r777otXXnklXnnllYj4fDDP7XYcnH375d073pK4N+vXr4+RI0fGggULMj9vvPFGLFmyJCpWrJhpd7A8oe9Q0KBBg1i8eHGMHz8+8vLy4vLLL4+uXbvG1q1b92n+cuU+//Wy460GX5z31FNPjXfffTeuvvrqeP/99+OUU07JXKlH8a1fvz4iIp588skix8rChQsz42hNmTIlBg8eHBdeeGHMmDEjFixYEBdccEGR4zXCsVQSLrroopgyZUps2rQpJk6cGN/+9rejUqVKZV3WQemLD/TIysqKwsLCWL9+fdSrV6/I53vBggWxePHiGDJkSER8/t3zxVuc9vV7K2Lnz/7gwYNj2rRpcfPNN8eLL74YCxYsiDZt2ux0zLBr2dnZMXPmzHj66afj6KOPjnHjxkXLli1j+fLl0b9//1iwYEGMHTs2XnrppViwYEHUqlVrv/btns4z1q9fH5deemmRz8zrr78eS5YsiaZNm0aVKlXitddei9///vdRr169GDZsWLRr1y7WrFmzx/opak/7al+Pyy/zu2dv806cODFefvnlOP744+Phhx+OFi1axF/+8peI2PfzTODgI9AC9tvHH38cixcvjp/+9KdxyimnRKtWrYr917iWLVtmBk/e7ouvjzvuuFi8eHE0a9Zsp5/twQl71rRp06hQoUImcIz4fFD2f/zjH7udJy8vL/r06RO/+tWvYvbs2fHyyy/HG2+8ES1btoxt27bF/PnzM22XLl1apO+33zK4419Adxwgfsd2/fv3j8mTJ8cdd9wR9957b0RE5uqggoKC/dvg/0JHH3105ObmxsqVK3c6TraPETR37tw4/vjj4/LLL49jjz02mjVrdsCubPlv1bRp08jJyYm5c+dmpm3dujXmzZsXRx99dGbaaaedFvn5+ZnbZYzzV3zHHXdcfPDBB1G+fPmdPuPbx9+rXbt2ke+diJ2/e3Jycvb5u2Xu3LkxYMCAOOOMM6JNmzZRt27dzG1Q7JusrKw44YQTYuTIkTF//vzIycmJadOmxdy5c2PQoEFx2mmnRevWrSM3Nzf+/e9/Z+Zr1apVvPfee0X6c3sAURzHHXdcLFy4cJfnENt/15QvXz569OgRY8aMib///e+xYsWKeO655/ZYPzvb3b764nFZUFAQb7755j4vd8d+37ZtW/ztb38rcsvgvjr22GPj+uuvj5deeimOOeaYeOihhyLCeSakmTG0gP1Wo0aNqFWrVtx7771Rr169WLlyZVx33XXFWsbAgQOja9eucdttt0WfPn3iueeei6effjrzF9aIiGHDhsXpp58eRx55ZPzv//5vlCtXLl5//fV4880346abbjrQm3VIqly5clx44YUxZMiQqFWrVtSpUyeGDh262xO1SZMmRUFBQXTu3DkqVaoUkydPjry8vGjYsGHmyUWXXHJJTJgwISpUqBA/+tGPIi8vL9NveXl58dWvfjVuueWWaNy4caxevTp++tOfFlnHsGHDokOHDtG6devYvHlzPPHEE5kT1Dp16kReXl5Mnz49jjjiiKhYsWJUq1atZHdSylWpUiUGDx4cV199dRQWFsaJJ54Ya9eujblz50bVqlWjf//+0bx58/jNb34TzzzzTDRu3Dh++9vfxrx58zJPlaT48vPz47LLLoshQ4ZEzZo148gjj4wxY8bExo0b48ILL8y0y87OjgEDBsT1118fzZs33+2tU+xejx49okuXLtGvX78YM2ZMtGjRIt5///148skn44wzzoiOHTvGySefHL/4xS/iN7/5TXTp0iUmT54cb775ZmZMpIjPx+t75ZVXYsWKFVG5cuWoWbPmbtfZvHnzmDp1avTp0yeysrLihhtuKNYVxv/tXnnllXj22Wfj61//etSpUydeeeWV+Oijj6JVq1bRvHnz+O1vfxsdO3aMdevWxZAhQyIvLy8zb48ePaJFixbRv3//+MUvfhHr1q2LoUOHFruGH//4x/HVr341rrzyyrjooosiPz8/Fi5cGDNnzow777wznnjiiXjnnXeia9euUaNGjXjqqaeisLAwWrZsucf6KWpP+yo/Pz+uueaaePLJJ6Np06Zx2223xZo1a/Z52XfddVc0b948WrVqFbfffnt88sknxfqjwPLly+Pee++Nb37zm1G/fv1YvHhxLFmyJM4///yIcJ4JqZYAZW7Tpk3JwoULk02bNpV1KcU2c+bMpFWrVklubm7Stm3bZPbs2UlEJNOmTUuWL1+eREQyf/78TPtPPvkkiYjk+eefz0y79957k//5n/9J8vLykn79+iU33XRTUrdu3SLrmT59enL88ccneXl5SdWqVZNOnTol9957b+b97etk9z799NPk3HPPTSpVqpQcfvjhyZgxY5Ju3bolP/zhD5MkSZKGDRsmt99+e5IkSTJt2rSkc+fOSdWqVZP8/Pzkq1/9ajJr1qzMst5///3k1FNPTXJzc5OGDRsmDz30UFKnTp3k7rvvzrRZuHBh0qVLlyQvLy9p3759MmPGjCJ9f+ONNyatWrVK8vLykpo1ayZ9+/ZN3nnnncz89913X9KgQYOkXLlySbdu3Up696TS7bffnjRs2DDzurCwMLnjjjuSli1bJhUqVEhq166d9OrVK3nhhReSJEmSzz77LBkwYEBSrVq1pHr16slll12WXHfddUm7du0yy+jfv3/St2/f0t2QFNpxP23atCkZOHBgcthhhyW5ubnJCSeckLz66qs7zbNs2bIkIpIxY8aUcrXpseN30nZ9+/ZN+vfvnyRJkqxbty4ZOHBgUr9+/aRChQpJgwYNku9973vJypUrM+2HDRuWHH744Um1atWSq6++OrnyyiuLfIcsXrw4+epXv5rk5eUlEZEsX748ef7555OISD755JMi616+fHnyta99LcnLy0saNGiQ3HnnnTvVuON3J0UtXLgw6dWrV1K7du0kNzc3adGiRTJu3LgkSZLktddeSzp27JhUrFgxad68efLII4/stC8XL16cnHjiiUlOTk7SokWLZPr06UV+3+/recarr76a9OzZM6lcuXKSn5+ftG3bNvnZz36WJEmSvPjii0m3bt2SGjVqJHl5eUnbtm2Thx9+eK/1U9Se9tWWLVuSyy67LKlZs2ZSp06dZPTo0UWO6yTZ9XG0vX8feuihpFOnTklOTk5y9NFHJ88991ymze6O3eHDh2d+t33wwQdJv379knr16iU5OTlJw4YNk2HDhiUFBQWZ9ns7z/yiNJ+7w6EkK0k8dxbK2meffRbLly+Pxo0bu1c/Ii6++OJ4++2348UXXyzrUthH//znP6NBgwYxa9aszFMU4VB2zjnnRHZ2dkyePHmf53nxxRfjlFNOiffeey8OP/zwEqwOIP1WrFgRjRs3jvnz50f79u3LupwinLvDwcEth0CZu/XWW6Nnz56Rn58fTz/9dPz617+O8ePHl3VZ7MFzzz0X69evjzZt2sSqVavi2muvjUaNGkXXrl3LujQoUdu2bYt//OMf8fLLL8ell166T/Ns3rw5PvrooxgxYkScddZZwiwAgAPAKHdAmXv11VejZ8+e0aZNm7j77rvjV7/6VVx00UVlXRZ7sHXr1vjJT34SrVu3jjPOOCNq164ds2fP3unpZHCoefPNN6Njx47RunXr+MEPfrBP8/z+97+Phg0bxpo1a2LMmDElXCEAwH8HtxzCQcBlywAAkA7O3eHg4AotAAAAAFJFoAUHERdMAgDAwc05OxwcBFpwENg+7tDGjRvLuBIAAGBPtp+zGzsUypanHMJBIDs7O6pXrx6rV6+OiIhKlSpFVlZWGVcFAABslyRJbNy4MVavXh3Vq1eP7Ozssi4J/qsZFB4OEkmSxAcffBBr1qwp61IAAIDdqF69etStW9cfoKGMCbTgIFNQUBBbt24t6zIAAIAvqFChgiuz4CAh0AIAAAAgVQwKDwAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKv8P4q9JP7ueKtUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_text = \"what a badass char is arthur, he is the best game char ever made, i luv rdr2\"\n",
    "predictions = predict(sample_text, best_model, tokenizer, device, max_len=128)\n",
    "print(f\"Predicted emotions for '{sample_text}': {predictions}\")\n",
    "\n",
    "predictions_array = predictions.squeeze()  # Remove unnecessary dimensions\n",
    "\n",
    "\n",
    "emotion_moodtags = []\n",
    "for items in predictions_array:\n",
    "    emotion_moodtags.append(items)\n",
    "\n",
    "fig = px.line_polar(pd.DataFrame(dict(r=emotion_moodtags, theta=EMOTION_LABELS)), r='r', theta='theta', line_close=True)\n",
    "fig.show()\n",
    "\n",
    "# fig = px.line_polar(pd.DataFrame(dict(r=emotion_moodtags, theta=EMOTION_LABELS)), r='r', theta='theta', line_close=True)\n",
    "# fig.show()\n",
    "\n",
    "    \n",
    "# Since predictions are probabilistic values, normalize to ensure they sum up to 1\n",
    "normalized_predictions = predictions_array / predictions_array.sum()  # Normalize the values\n",
    "\n",
    "## Horizontal Stacked Bar Plot\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15, 5))\n",
    "\n",
    "left = 0\n",
    "for i in range(len(normalized_predictions)):\n",
    "    ax.barh(0, normalized_predictions[i], color=plt.cm.tab10(i), left=left, label=EMOTION_LABELS[i])\n",
    "    left += normalized_predictions[i]\n",
    "\n",
    "# Add legend\n",
    "ax.set_xlim(0, 1)\n",
    "ax.set_yticks([])\n",
    "ax.set_xticks(np.arange(0, 1.1, 0.1))\n",
    "ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=len(EMOTION_LABELS))\n",
    "\n",
    "# Add title\n",
    "plt.title('Emotion Prediction Distribution')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "c39a549c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:49.838470Z",
     "iopub.status.busy": "2025-03-02T20:21:49.838206Z",
     "iopub.status.idle": "2025-03-02T20:21:50.067327Z",
     "shell.execute_reply": "2025-03-02T20:21:50.066635Z"
    },
    "papermill": {
     "duration": 0.252802,
     "end_time": "2025-03-02T20:21:50.068705",
     "exception": false,
     "start_time": "2025-03-02T20:21:49.815903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted emotions for 'I don't no fr y hes sooo sad.': [[2.3046394e-03 2.5029914e-04 3.1983475e-03 7.5752796e-03 7.1837995e-03\n",
      "  9.5948064e-01 1.7057026e-02]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<head><meta charset=\"utf-8\" /></head>\n",
       "<body>\n",
       "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
       "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"128f0794-f6e1-4493-82bf-195bd013db20\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"128f0794-f6e1-4493-82bf-195bd013db20\")) {                    Plotly.newPlot(                        \"128f0794-f6e1-4493-82bf-195bd013db20\",                        [{\"hovertemplate\":\"r=%{r}\\u003cbr\\u003etheta=%{theta}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"r\":[0.0023046394,0.00025029914,0.0031983475,0.0075752796,0.0071837995,0.95948064,0.017057026,0.0023046394],\"showlegend\":false,\"subplot\":\"polar\",\"theta\":[\"anger\",\"disgust\",\"fear\",\"joy\",\"neutral\",\"sadness\",\"surprise\",\"anger\"],\"type\":\"scatterpolar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"polar\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"angularaxis\":{\"direction\":\"clockwise\",\"rotation\":90}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('128f0794-f6e1-4493-82bf-195bd013db20');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                            </script>        </div>\n",
       "</body>\n",
       "</html>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABLQAAAHeCAYAAACCDFI4AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABEMElEQVR4nO3debgWZf0/8M/hwFk47AgCX5EdRGRRCMIFSCFSJNC+WpYK5pYLpAaGmWyaGJlKKLhDRYapYH1dEFAxQVNKMBUkQBBLFDMBWWQ5Z35/ePH8OLIehHMYer2u61wXzzz3zHxm7meeM7zPzD1ZSZIkAQAAAAApUa6sCwAAAACAkhBoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAERGxfPnyyMrKiokTJ5Z1KaVuZ9s+fPjwyMrK2m/rmDVrVmRlZcWsWbP22zIPpIYNG0b//v0P+Hp2tu/79+8flSpVOuDr3iYrKyuGDx9eausDAL48gRYAHEATJ06MrKysXf785S9/KfWaHnroobjjjjtKfb27079//2L7pUqVKtG2bdv45S9/GZs2bSrr8kpk3LhxB10o2K1bt8y+LVeuXFSpUiVatGgR5513XsyYMWO/reepp546aIOhg7k2AKDkypd1AQDw32DkyJHRqFGjHaY3bdq01Gt56KGH4s0334yrrrqq2PQGDRrExo0bo0KFCqVeU0REbm5u3H///RERsXr16njsscdi0KBBMXfu3Jg8eXKp1/PTn/40hgwZUuL5xo0bF4cddtgOVzd16dIlNm7cGDk5OfupwpI54ogjYtSoURERsX79+liyZElMmTIlJk2aFGeffXZMmjSpWN8vWrQoypUr2d8+n3rqqbjrrrtKFByV1udud7Vt3Lgxypd3WgwAaeI3NwCUglNPPTU6dOhQ1mXsVlZWVuTl5ZXZ+suXLx/nnntu5vXll18enTp1iocffjhuu+22qFev3g7zJEkSn332WeTn5x+QevZnyFGuXLky3b9Vq1Yttn8jIm655ZYYOHBgjBs3Lho2bBg///nPM+/l5uYe0Hq2bt0aRUVFkZOTU6b7JSLKfP0AQMm55RAADgLbxhG69dZb46677orGjRtHxYoV4+tf/3q89957kSRJ3HjjjXHEEUdEfn5+9OnTJ/7zn//ssJxx48ZFq1atIjc3N+rVqxdXXHFFrF69OvN+t27d4sknn4x33303cwtaw4YNi9XwxdvlnnvuuTjppJOioKAgqlWrFn369ImFCxcWa7NtvKklS5ZE//79o1q1alG1atW44IILYsOGDfu0T8qVKxfdunXL1Bbx+bhOp59+ejzzzDPRoUOHyM/Pj3vuuSciPr+q66qrror69etHbm5uNG3aNH7+859HUVFRseWuXr06+vfvH1WrVo1q1apFv379iu2jL27TF02aNCk6duwYFStWjOrVq0eXLl1i+vTpmfreeuuteOGFFzL7d9s27GoMrUceeSTat28f+fn5cdhhh8W5554b//rXv4q12Tam1L/+9a/o27dvVKpUKWrVqhWDBg2KwsLCEu7Z/y87Ozt+9atfxdFHHx133nlnrFmzJvPeF8fQ2rJlS4wYMSKaNWsWeXl5UbNmzTjxxBMztyz2798/7rrrroiIYrePRhT/fN9xxx3RpEmTyM3NjQULFux27LZ33nknevbsGQUFBVGvXr0YOXJkJEmSeX9X+/SLy9xdbdumffHKrXnz5sWpp54aVapUiUqVKsUpp5yywy3C224pnjNnTlxzzTVRq1atKCgoiDPOOCM++uijPXcAALDPXKEFAKVgzZo18e9//7vYtKysrKhZs2axab/73e9i8+bNMWDAgPjPf/4To0ePjrPPPjtOPvnkmDVrVvz4xz+OJUuWxNixY2PQoEHx4IMPZuYdPnx4jBgxIrp37x6XXXZZLFq0KMaPHx9z586NOXPmRIUKFeL666+PNWvWxD//+c+4/fbbIyJ2O/j2zJkz49RTT43GjRvH8OHDY+PGjTF27Ng44YQT4rXXXsuEYducffbZ0ahRoxg1alS89tprcf/990ft2rWLXflTEkuXLo2IKLafFi1aFOecc05ceumlcfHFF0eLFi1iw4YN0bVr1/jXv/4Vl156aRx55JHx0ksvxXXXXRcrV67MjBmWJEn06dMnZs+eHT/4wQ+iZcuWMXXq1OjXr99e1TNixIgYPnx4HH/88TFy5MjIycmJV155JZ577rn4+te/HnfccUcMGDAgKlWqFNdff31ERBx++OG7XN7EiRPjggsuiK985SsxatSo+PDDD2PMmDExZ86cmDdvXlSrVi3TtrCwMHr27BmdOnWKW2+9NWbOnBm//OUvo0mTJnHZZZeVcM/+f9nZ2XHOOefEDTfcELNnz45evXrttN3w4cNj1KhRcdFFF0XHjh1j7dq18de//jVee+216NGjR1x66aXx/vvvx4wZM+K3v/3tTpcxYcKE+Oyzz+KSSy6J3NzcqFGjxg6B4/bb+41vfCO++tWvxujRo2PatGkxbNiw2Lp1a4wcObJE27g3tW3vrbfeipNOOimqVKkS1157bVSoUCHuueee6NatW7zwwgvRqVOnYu0HDBgQ1atXj2HDhsXy5cvjjjvuiCuvvDIefvjhEtUJAJRAAgAcMBMmTEgiYqc/ubm5mXbLli1LIiKpVatWsnr16sz06667LomIpG3btsmWLVsy088555wkJycn+eyzz5IkSZJVq1YlOTk5yde//vWksLAw0+7OO+9MIiJ58MEHM9N69eqVNGjQYIdat9UwYcKEzLR27doltWvXTj7++OPMtNdffz0pV65ccv7552emDRs2LImI5Pvf/36xZZ5xxhlJzZo197if+vXrlxQUFCQfffRR8tFHHyVLlixJbr755iQrKytp06ZNpl2DBg2SiEimTZtWbP4bb7wxKSgoSP7xj38Umz5kyJAkOzs7WbFiRZIkSfL4448nEZGMHj0602br1q3JSSedtMO2b9umbRYvXpyUK1cuOeOMM4rt4yRJkqKiosy/W7VqlXTt2nWHbXz++eeTiEief/75JEmSZPPmzUnt2rWTY445Jtm4cWOm3RNPPJFERDJ06NBi+ycikpEjRxZb5rHHHpu0b99+h3V9UdeuXZNWrVrt8v2pU6cmEZGMGTMmM61BgwZJv379Mq/btm2b9OrVa7frueKKK5KdnV5u+2xVqVIlWbVq1U7f237fb9veAQMGZKYVFRUlvXr1SnJycpKPPvooSZId9+nulrmr2pIkSSIiGTZsWOZ13759k5ycnGTp0qWZae+//35SuXLlpEuXLplp247v7t27F/sMXH311Ul2dnaxYxkA2L/ccggApeCuu+6KGTNmFPt5+umnd2h31llnRdWqVTOvt10Jcu655xYbz6lTp06xefPmzK1pM2fOjM2bN8dVV11VbCDviy++OKpUqRJPPvlkiWteuXJlzJ8/P/r37x81atTITG/Tpk306NEjnnrqqR3m+cEPflDs9UknnRQff/xxrF27do/rW79+fdSqVStq1aoVTZs2jZ/85CfRuXPnmDp1arF2jRo1ip49exab9sgjj8RJJ50U1atXj3//+9+Zn+7du0dhYWH8+c9/jojPBwYvX758sSuasrOzY8CAAXus7/HHH4+ioqIYOnToDoOl7+zWxD3561//GqtWrYrLL7+82BhOvXr1iqOOOmqnfbaz/fvOO++UeN1ftO0qvU8//XSXbapVqxZvvfVWLF68eJ/X861vfStq1aq11+2vvPLKzL+zsrLiyiuvjM2bN8fMmTP3uYY9KSwsjOnTp0ffvn2jcePGmel169aN7373uzF79uwdPs+XXHJJsc/ASSedFIWFhfHuu+8esDoB4L+dWw4BoBR07NhxrwaFP/LII4u93hZu1a9ff6fTP/nkk4iIzH+cW7RoUaxdTk5ONG7ceJ/+Y72rZUZEtGzZMp555plYv359FBQU7LL+6tWrZ+qsUqXKbteXl5cX//d//xcRnw9I3qhRozjiiCN2aLezp0UuXrw4/v73v+8yLFm1alVmm+rWrbvDbZY728YvWrp0aZQrVy6OPvroPbbdG7vbv0cddVTMnj272LS8vLwdtq969eqZz8CXsW7duoiIqFy58i7bjBw5Mvr06RPNmzePY445Jr7xjW/EeeedF23atNnr9eys73alXLlyxQKliIjmzZtHxP8fU+1A+Oijj2LDhg27/NwXFRXFe++9F61atcpM393nHgA4MARaAHAQyc7OLtH0ZLsBsg8GX6bO7Ozs6N69+x7b7eyJhkVFRdGjR4+49tprdzrPtiAkzXa1b/eHN998MyIimjZtuss2Xbp0iaVLl8Yf//jHmD59etx///1x++23x9133x0XXXTRXq1nfz+NcldXxn2ZgfL3RVqOTwA4lLjlEAAOAQ0aNIiIzwdM397mzZtj2bJlmfcj9v72uF0tMyLi7bffjsMOO6zY1VllqUmTJrFu3bro3r37Tn+2XUHToEGDWLlyZeaKpG12to07W0dRUVEsWLBgt+32x/5dtGhRsT47kAoLC+Ohhx6KihUrxoknnrjbtjVq1IgLLrggfv/738d7770Xbdq0KfZ0wH259XJXioqKdrid8h//+EdEROZhBNuuhPriUyp3dkXi3tZWq1atqFix4i4/9+XKldvhikkAoPQJtADgENC9e/fIycmJX/3qV8WuCnnggQdizZo1xZ5cV1BQEGvWrNnjMuvWrRvt2rWLX//618UCgzfffDOmT58ep5122n7dhi/j7LPPjpdffjmeeeaZHd5bvXp1bN26NSIiTjvttNi6dWuMHz8+835hYWGMHTt2j+vo27dvlCtXLkaOHLnDk/m23+cFBQU7BCw706FDh6hdu3bcfffdsWnTpsz0p59+OhYuXLjLpw3uT4WFhTFw4MBYuHBhDBw4cLe3hX788cfFXleqVCmaNm1arPZtAefebP/euPPOOzP/TpIk7rzzzqhQoUKccsopEfF5KJidnZ0ZI22bcePG7bCsva0tOzs7vv71r8cf//jHYrc2fvjhh/HQQw/FiSeeuMfbZwGAA88thwBQCp5++ul4++23d5h+/PHH7zBO0L6oVatWXHfddTFixIj4xje+Ed/85jdj0aJFMW7cuPjKV74S5557bqZt+/bt4+GHH45rrrkmvvKVr0SlSpWid+/eO13uL37xizj11FOjc+fOceGFF8bGjRtj7NixUbVq1WJX5pS1wYMHx5/+9Kc4/fTTo3///tG+fftYv359vPHGG/Hoo4/G8uXL47DDDovevXvHCSecEEOGDInly5fH0UcfHVOmTNmrgK9p06Zx/fXXx4033hgnnXRSnHnmmZGbmxtz586NevXqxahRoyLi8/07fvz4uOmmm6Jp06ZRu3btOPnkk3dYXoUKFeLnP/95XHDBBdG1a9c455xz4sMPP4wxY8ZEw4YN4+qrr96v+2jNmjUxadKkiIjYsGFDLFmyJKZMmRJLly6N73znO3HjjTfudv6jjz46unXrFu3bt48aNWrEX//613j00UeLDdzevn37iIgYOHBg9OzZM7Kzs+M73/nOPtWbl5cX06ZNi379+kWnTp3i6aefjieffDJ+8pOfZMYSq1q1apx11lkxduzYyMrKiiZNmsQTTzyRGTNteyWp7aabbooZM2bEiSeeGJdffnmUL18+7rnnnti0aVOMHj16n7YHANi/BFoAUAqGDh260+kTJkzYL4FWRMTw4cOjVq1aceedd8bVV18dNWrUiEsuuSRuvvnmqFChQqbd5ZdfHvPnz48JEybE7bffHg0aNNhloNW9e/eYNm1aDBs2LIYOHRoVKlSIrl27xs9//vMSDfB9oFWsWDFeeOGFuPnmm+ORRx6J3/zmN1GlSpVo3rx5jBgxIjOIfrly5eJPf/pTXHXVVTFp0qTIysqKb37zm/HLX/4yjj322D2uZ+TIkdGoUaMYO3ZsXH/99VGxYsVo06ZNnHfeeZk2Q4cOjXfffTdGjx4dn376aXTt2nWngVZERP/+/aNixYpxyy23xI9//OMoKCiIM844I37+859HtWrV9su+2eaf//xnps5KlSpF3bp1o3PnzjF+/Pjo0aPHHucfOHBg/OlPf4rp06fHpk2bokGDBnHTTTfF4MGDM23OPPPMGDBgQEyePDkmTZoUSZLsc6CVnZ0d06ZNi8suuywGDx4clStXznwOtzd27NjYsmVL3H333ZGbmxtnn312/OIXv4hjjjmmWLuS1NaqVat48cUX47rrrotRo0ZFUVFRdOrUKSZNmpR58igAULayEqNVAgAAAJAixtACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqpTf3wssKiqK999/PypXrhxZWVn7e/EAAAAApESSJPHpp59GvXr1oly5/Xdd1X4PtN5///2oX7/+/l4sAAAAACn13nvvxRFHHLHflrffA63KlStHxOeFVqlSZX8vHgAAAICUWLt2bdSvXz+TF+0v+z3Q2nabYZUqVQRaAAAAAOz3YakMCg8AAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVCl/oBZ8zLBnolxuxajcckix6X8YtXW38z3X7a49LvuzT277UrUBAAAAsGvfbvTj/bKcTzet3y/L+SJXaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVBFoAAAAApIpACwAAAIBUEWgBAAAAkCoCLQAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKmSlSRJsj8XuHbt2qhatWqsWbMmqlSpsj8XDQAAAECKHKicyBVaAAAAAKSKQAsAAACAVBFoAQAAAJAqAi0AAAAAUkWgBQAAAECqCLQAAAAASBWBFgAAAACpItACAAAAIFUEWgAAAACkikALAAAAgFQRaAEAAACQKgItAAAAAFJFoAUAAABAqgi0AAAAAEgVgRYAAAAAqSLQAgAAACBVyu/vBSZJEhERa9eu3d+LBgAAACBFtuVD2/Ki/WW/B1off/xxRETUr19/fy8aAAAAgBT6+OOPo2rVqvttefs90KpRo0ZERKxYsWK/FkrZWLt2bdSvXz/ee++9qFKlSlmXw5ekPw89+vTQoj8PLfrz0KI/Dz369NCiPw8t+vPQsmbNmjjyyCMzedH+st8DrXLlPh+Wq2rVqj54h5AqVaroz0OI/jz06NNDi/48tOjPQ4v+PPTo00OL/jy06M9Dy7a8aL8tb78uDQAAAAAOMIEWAAAAAKmy3wOt3NzcGDZsWOTm5u7vRVMG9OehRX8eevTpoUV/Hlr056FFfx569OmhRX8eWvTnoeVA9WdWsr+fmwgAAAAAB5BbDgEAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKTKPgVad911VzRs2DDy8vKiU6dO8eqrr+62/SOPPBJHHXVU5OXlRevWreOpp57ap2I5MErSn2+99VZ861vfioYNG0ZWVlbccccdpVcoe6Uk/XnffffFSSedFNWrV4/q1atH9+7d93g8U/pK0qdTpkyJDh06RLVq1aKgoCDatWsXv/3tb0uxWvakpL9Dt5k8eXJkZWVF3759D2yBlEhJ+nPixImRlZVV7CcvL68Uq2VPSnp8rl69Oq644oqoW7du5ObmRvPmzZ3nHmRK0qfdunXb4RjNysqKXr16lWLF7E5Jj9E77rgjWrRoEfn5+VG/fv24+uqr47PPPiulatmTkvTnli1bYuTIkdGkSZPIy8uLtm3bxrRp00qxWnbnz3/+c/Tu3Tvq1asXWVlZ8fjjj+9xnlmzZsVxxx0Xubm50bRp05g4cWLJV5yU0OTJk5OcnJzkwQcfTN56663k4osvTqpVq5Z8+OGHO20/Z86cJDs7Oxk9enSyYMGC5Kc//WlSoUKF5I033ijpqjkAStqfr776ajJo0KDk97//fVKnTp3k9ttvL92C2a2S9ud3v/vd5K677krmzZuXLFy4MOnfv39StWrV5J///GcpV86ulLRPn3/++WTKlCnJggULkiVLliR33HFHkp2dnUybNq2UK2dnStqf2yxbtiz5n//5n+Skk05K+vTpUzrFskcl7c8JEyYkVapUSVauXJn5+eCDD0q5analpP25adOmpEOHDslpp52WzJ49O1m2bFkya9asZP78+aVcObtS0j79+OOPix2fb775ZpKdnZ1MmDChdAtnp0ran7/73e+S3Nzc5He/+12ybNmy5Jlnnknq1q2bXH311aVcOTtT0v689tprk3r16iVPPvlksnTp0mTcuHFJXl5e8tprr5Vy5ezMU089lVx//fXJlClTkohIpk6dutv277zzTlKxYsXkmmuuSRYsWJCMHTt2n/7PUuJAq2PHjskVV1yReV1YWJjUq1cvGTVq1E7bn3322UmvXr2KTevUqVNy6aWXlnTVHAAl7c/tNWjQQKB1kPky/ZkkSbJ169akcuXKya9//esDVSIl9GX7NEmS5Nhjj01++tOfHojyKKF96c+tW7cmxx9/fHL//fcn/fr1E2gdREranxMmTEiqVq1aStVRUiXtz/HjxyeNGzdONm/eXFolUkJf9nfo7bffnlSuXDlZt27dgSqREihpf15xxRXJySefXGzaNddck5xwwgkHtE72Tkn7s27dusmdd95ZbNqZZ56ZfO973zugdVJyexNoXXvttUmrVq2KTfv2t7+d9OzZs0TrKtEth5s3b46//e1v0b1798y0cuXKRffu3ePll1/e6Twvv/xysfYRET179txle0rPvvQnB6/90Z8bNmyILVu2RI0aNQ5UmZTAl+3TJEni2WefjUWLFkWXLl0OZKnshX3tz5EjR0bt2rXjwgsvLI0y2Uv72p/r1q2LBg0aRP369aNPnz7x1ltvlUa57MG+9Oef/vSn6Ny5c1xxxRVx+OGHxzHHHBM333xzFBYWllbZ7Mb+OC964IEH4jvf+U4UFBQcqDLZS/vSn8cff3z87W9/y9zG9s4778RTTz0Vp512WqnUzK7tS39u2rRph9v08/PzY/bs2Qe0Vg6M/ZUTlSjQ+ve//x2FhYVx+OGHF5t++OGHxwcffLDTeT744IMStaf07Et/cvDaH/354x//OOrVq7fDlwtlY1/7dM2aNVGpUqXIycmJXr16xdixY6NHjx4Hulz2YF/6c/bs2fHAAw/EfffdVxolUgL70p8tWrSIBx98MP74xz/GpEmToqioKI4//vj45z//WRolsxv70p/vvPNOPProo1FYWBhPPfVU3HDDDfHLX/4ybrrpptIomT34sudFr776arz55ptx0UUXHagSKYF96c/vfve7MXLkyDjxxBOjQoUK0aRJk+jWrVv85Cc/KY2S2Y196c+ePXvGbbfdFosXL46ioqKYMWNGTJkyJVauXFkaJbOf7SonWrt2bWzcuHGvl+Mph0BERNxyyy0xefLkmDp1qkGKU65y5coxf/78mDt3bvzsZz+La665JmbNmlXWZVFCn376aZx33nlx3333xWGHHVbW5bAfdO7cOc4///xo165ddO3aNaZMmRK1atWKe+65p6xLYx8UFRVF7dq1495774327dvHt7/97bj++uvj7rvvLuvS2A8eeOCBaN26dXTs2LGsS2EfzZo1K26++eYYN25cvPbaazFlypR48skn48Ybbyzr0tgHY8aMiWbNmsVRRx0VOTk5ceWVV8YFF1wQ5cqJNP6blS9J48MOOyyys7Pjww8/LDb9ww8/jDp16ux0njp16pSoPaVnX/qTg9eX6c9bb701brnllpg5c2a0adPmQJZJCexrn5YrVy6aNm0aERHt2rWLhQsXxqhRo6Jbt24Hslz2oKT9uXTp0li+fHn07t07M62oqCgiIsqXLx+LFi2KJk2aHNii2aX98Tu0QoUKceyxx8aSJUsORImUwL70Z926daNChQqRnZ2dmdayZcv44IMPYvPmzZGTk3NAa2b3vswxun79+pg8eXKMHDnyQJZICexLf95www1x3nnnZa6ya926daxfvz4uueSSuP766wUhZWhf+rNWrVrx+OOPx2effRYff/xx1KtXL4YMGRKNGzcujZLZz3aVE1WpUiXy8/P3ejklOopzcnKiffv28eyzz2amFRUVxbPPPhudO3fe6TydO3cu1j4iYsaMGbtsT+nZl/7k4LWv/Tl69Oi48cYbY9q0adGhQ4fSKJW9tL+O0aKioti0adOBKJESKGl/HnXUUfHGG2/E/PnzMz/f/OY342tf+1rMnz8/6tevX5rl8wX74/gsLCyMN954I+rWrXugymQv7Ut/nnDCCbFkyZJM0BwR8Y9//CPq1q0rzDoIfJlj9JFHHolNmzbFueeee6DLZC/tS39u2LBhh9BqWwD9+bjVlJUvc3zm5eXF//zP/8TWrVvjscceiz59+hzocjkA9ltOVLLx6j9/vGZubm4yceLEZMGCBckll1ySVKtWLfPY6fPOOy8ZMmRIpv2cOXOS8uXLJ7feemuycOHCZNiwYUmFChWSN954o6Sr5gAoaX9u2rQpmTdvXjJv3rykbt26yaBBg5J58+YlixcvLqtNYDsl7c9bbrklycnJSR599NFij6n+9NNPy2oT+IKS9unNN9+cTJ8+PVm6dGmyYMGC5NZbb03Kly+f3HfffWW1CWynpP35RZ5yeHApaX+OGDEieeaZZ5KlS5cmf/vb35LvfOc7SV5eXvLWW2+V1SawnZL254oVK5LKlSsnV155ZbJo0aLkiSeeSGrXrp3cdNNNZbUJfMG+fueeeOKJybe//e3SLpc9KGl/Dhs2LKlcuXLy+9//PnnnnXeS6dOnJ02aNEnOPvvsstoEtlPS/vzLX/6SPPbYY8nSpUuTP//5z8nJJ5+cNGrUKPnkk0/KaAvY3qeffprJCSIiue2225J58+Yl7777bpIkSTJkyJDkvPPOy7R/5513kooVKyaDBw9OFi5cmNx1111JdnZ2Mm3atBKtt8SBVpIkydixY5MjjzwyycnJSTp27Jj85S9/ybzXtWvXpF+/fsXa/+EPf0iaN2+e5OTkJK1atUqefPLJfVktB0hJ+nPZsmVJROzw07Vr19IvnJ0qSX82aNBgp/05bNiw0i+cXSpJn15//fVJ06ZNk7y8vKR69epJ586dk8mTJ5dB1exKSX+Hbk+gdfApSX9eddVVmbaHH354ctpppyWvvfZaGVTNrpT0+HzppZeSTp06Jbm5uUnjxo2Tn/3sZ8nWrVtLuWp2p6R9+vbbbycRkUyfPr2UK2VvlKQ/t2zZkgwfPjxp0qRJkpeXl9SvXz+5/PLLBSAHkZL056xZs5KWLVsmubm5Sc2aNZPzzjsv+de//lUGVbMzzz///E7/X7mtD/v167dDZvD8888n7dq1S3JycpLGjRsnEyZMKPF6s5LE9ZYAAAAApIeR8AAAAABIFYEWAAAAAKki0AIAAAAgVcqXdQFAcYWFhbFly5ayLgMAAPiCChUqRHZ2dlmXAYRACw4aSZLEBx98EKtXry7rUgAAgF2oVq1a1KlTJ7Kyssq6FPivJtCCg8S2MKt27dpRsWJFvyABAOAgkiRJbNiwIVatWhUREXXr1i3jiuC/m0ALDgKFhYWZMKtmzZplXQ4AALAT+fn5ERGxatWqqF27ttsPoQwZFB4OAtvGzKpYsWIZVwIAAOzOtnN2495C2RJowUHEbYYAAHBwc84OBweBFgAAAACpItAC+C/WrVu3uOqqqyIiomHDhnHHHXeUaT2UTJIkcckll0SNGjUiKysr5s+fX9Yl/dfo379/9O3bt6zL4CDgu7N0ZWVlxeOPP17WZXCQGz58eLRr166sywAOMIPCw0Gs4ZAnS3V9y2/pVarrO6QMr1rK61uz3xc5d+7cKCgo2O/L3RfLly+PRo0axbx588rshLT1r1uX6vre6PdGieeZNm1aTJw4MWbNmhWNGzeOww477ABUVvoWHtWyVNfX8u2FJZ5nzJgxkSTJAajmwLrrB8+V6vquuPvkUl3f3ujWrVu0a9fukAmhfvnt00ttXT96+IlSWxfF/XPIi6W6viNuOalU17e/DRo0KAYMGFDWZQAHmEALOCRt2bIlKlSoUNZlpEqtWrXKugRKaOnSpVG3bt04/vjjD9g6Nm/eHDk5OQds+WlVtWoph9iUqiRJorCwMMqXd6oMZWFff/dsO3YrVaoUlSpVOgCVAQcTtxwCX8q0adPixBNPjGrVqkXNmjXj9NNPj6VLl0bE51fZZGVlxZQpU+JrX/taVKxYMdq2bRsvv/xysWXcd999Ub9+/ahYsWKcccYZcdttt0W1atWKtfnjH/8Yxx13XOTl5UXjxo1jxIgRsXXr1sz7WVlZMX78+PjmN78ZBQUF8bOf/eyAb3varF+/Ps4///yoVKlS1K1bN375y18We3/722aSJInhw4fHkUceGbm5uVGvXr0YOHBgpu3KlSujV69ekZ+fH40aNYqHHnqo2Pzb+n77W+BWr14dWVlZMWvWrIiI+OSTT+J73/te1KpVK/Lz86NZs2YxYcKEiIho1KhRREQce+yxkZWVFd26dTsg+yTN+vfvHwMGDIgVK1ZEVlZWNGzYMIqKimLUqFHRqFGjyM/Pj7Zt28ajjz6amaewsDAuvPDCzPstWrSIMWPG7LDcvn37xs9+9rOoV69etGjRorQ3LRW2v+Vw06ZNMXDgwKhdu3bk5eXFiSeeGHPnzo2Iz4+lpk2bxq233lps/vnz50dWVlYsWbKktEs/qHXr1i0GDhwY1157bdSoUSPq1KkTw4cPz7y/evXquOiii6JWrVpRpUqVOPnkk+P111/PvL+zW0GvuuqqzHdI//7944UXXogxY8ZEVlZWZGVlxfLly2PWrFmRlZUVTz/9dLRv3z5yc3Nj9uzZsXTp0ujTp08cfvjhUalSpfjKV74SM2fOLIU9ceh49NFHo3Xr1pGfnx81a9aM7t27x/r162Pu3LnRo0ePOOyww6Jq1arRtWvXeO2114rNu3jx4ujSpUvk5eXF0UcfHTNmzCj2/t6eZ8yePTtOOumkyM/Pj/r168fAgQNj/fr1mffHjRsXzZo1i7y8vDj88MPjf//3f/dYPzva1b7afniDbfr27Rv9+/fPvG7YsGHceOONcf7550eVKlXikksuyfTv5MmT4/jjj4+8vLw45phj4oUXXsjMt6tj94u3HM6aNSs6duwYBQUFUa1atTjhhBPi3Xffzby/p/NM4OAk0AK+lPXr18c111wTf/3rX+PZZ5+NcuXKxRlnnBFFRUWZNtdff30MGjQo5s+fH82bN49zzjknc5IwZ86c+MEPfhA//OEPY/78+dGjR48dwqgXX3wxzj///PjhD38YCxYsiHvuuScmTpy4Q7vhw4fHGWecEW+88UZ8//vfP/AbnzKDBw+OF154If74xz/G9OnTY9asWTv852Gbxx57LG6//fa45557YvHixfH4449H69b//xa8888/P95///2YNWtWPPbYY3HvvffGqlWrSlTPDTfcEAsWLIinn346Fi5cGOPHj8/cMvfqq69GRMTMmTNj5cqVMWXKlH3c6kPXmDFjYuTIkXHEEUfEypUrY+7cuTFq1Kj4zW9+E3fffXe89dZbcfXVV8e5556bOfkvKiqKI444Ih555JFYsGBBDB06NH7yk5/EH/7wh2LLfvbZZ2PRokUxY8aMeOIJtxjtybXXXhuPPfZY/PrXv47XXnstmjZtGj179oz//Oc/kZWVFd///vczYe02EyZMiC5dukTTpk3LqOqD169//esoKCiIV155JUaPHh0jR47MBBlnnXVWrFq1Kp5++un429/+Fscdd1yccsop8Z///Gevlj1mzJjo3LlzXHzxxbFy5cpYuXJl1K9fP/P+kCFD4pZbbomFCxdGmzZtYt26dXHaaafFs88+G/PmzYtvfOMb0bt371ixYsUB2fZDzcqVK+Occ86J73//+7Fw4cKYNWtWnHnmmZEkSXz66afRr1+/mD17dvzlL3+JZs2axWmnnRaffvppRHz+fXXmmWdGTk5OvPLKK3H33XfHj3/8452uZ3fnGUuXLo1vfOMb8a1vfSv+/ve/x8MPPxyzZ8+OK6+8MiIi/vrXv8bAgQNj5MiRsWjRopg2bVp06dJlj/VT3P7YV7feemu0bds25s2bFzfccENm+uDBg+NHP/pRzJs3Lzp37hy9e/eOjz/+uNi8Xzx2t7d169bo27dvdO3aNf7+97/Hyy+/HJdccknmSYV7e54JHHxcRw18Kd/61reKvX7wwQejVq1asWDBgsyl3oMGDYpevT4fn2vEiBHRqlWrWLJkSRx11FExduzYOPXUU2PQoEEREdG8efN46aWXiv0nesSIETFkyJDo169fREQ0btw4brzxxrj22mtj2LBhmXbf/e5344ILLjig25tW69atiwceeCAmTZoUp5xySkR8/p/GI444YqftV6xYEXXq1Inu3btHhQoV4sgjj4yOHTtGRMTbb78dM2fOjLlz50aHDh0iIuL++++PZs2alaimFStWxLHHHptZRsOGDTPvbbv9sWbNmlGnTp0SLfe/RdWqVaNy5cqRnZ0dderUiU2bNsXNN98cM2fOjM6dO0fE58fK7Nmz45577omuXbtGhQoVYsSIEZllNGrUKF5++eX4wx/+EGeffXZmekFBQdx///1uNdwL69evj/Hjx8fEiRPj1FNPjYjPrzqdMWNGPPDAAzF48ODo379/DB06NF599dXo2LFjbNmyJR566KEdrtric23atMl8tzdr1izuvPPOePbZZyM/Pz9effXVWLVqVeTm5kbE5/8Bfvzxx+PRRx+NSy65ZI/Lrlq1auTk5ETFihV3+t0ycuTI6NGjR+Z1jRo1om3btpnXN954Y0ydOjX+9Kc/ZQIRdm3lypWxdevWOPPMM6NBgwYREZk/jpx8cvHx1e69996oVq1avPDCC3H66afHzJkz4+23345nnnkm6tWrFxERN998c+Y4297uzjNGjRoV3/ve9zJXCDVr1ix+9atfRdeuXWP8+PGxYsWKKCgoiNNPPz0qV64cDRo0iGOPPXaP9VPc/thXJ598cvzoRz/KvF6+fHlERFx55ZWZ883x48fHtGnT4oEHHohrr7020/aLx+721q5dG2vWrInTTz89mjRpEhERLVv+/7Ea9/Y8Ezj4uEIL+FIWL14c55xzTjRu3DiqVKmSCSW2/+v19n8pq1u3bkRE5mqeRYsWZYKSbb74+vXXX4+RI0dmxkOoVKlS5q/rGzZsyLTbFoywo6VLl8bmzZujU6dOmWk1atTY5e1kZ511VmzcuDEaN24cF198cUydOjXz1+5FixZF+fLl47jjjsu0b9q0aVSvXr1ENV122WUxefLkaNeuXVx77bXx0ksv7cOWsc2SJUtiw4YN0aNHj2LHym9+85vMbcAREXfddVe0b98+atWqFZUqVYp77713h6tNWrduLczaS0uXLo0tW7bECSeckJlWoUKF6NixYyxc+Plg8/Xq1YtevXrFgw8+GBER//d//xebNm2Ks846q0xqPth98eqKunXrxqpVq+L111+PdevWRc2aNYt9xpctW1bsM/5lfPH3yLp162LQoEHRsmXLqFatWlSqVCkWLlzoCq291LZt2zjllFOidevWcdZZZ8V9990Xn3zySUREfPjhh3HxxRdHs2bNomrVqlGlSpVYt25dZt8uXLgw6tevnwmzIiIT1n/R7s4zXn/99Zg4cWKxz0zPnj2jqKgoli1bFj169IgGDRpE48aN47zzzovf/e53mXOL3dVPcftjX+3qPG77fi9fvnx06NAh8/26p3kjPj/f6d+/f/Ts2TN69+4dY8aMiZUrV2be39vzTODgI9ACvpTevXvHf/7zn7jvvvvilVdeiVdeeSUiPh/Mc5vtB2ffdnn39rck7sm6detixIgRMX/+/MzPG2+8EYsXL468vLxMu4PlCX2Hgvr168eiRYti3LhxkZ+fH5dffnl06dIltmzZslfzlyv3+a+X7W81+OK8p556arz77rtx9dVXx/vvvx+nnHJK5ko9Sm7dunUREfHkk08WO1YWLFiQGUdr8uTJMWjQoLjwwgtj+vTpMX/+/LjggguKHa8RjqUD4aKLLorJkyfHxo0bY8KECfHtb387KlasWNZlHZS++ECPrKysKCoqinXr1kXdunWLfb7nz58fixYtisGDB0fE5989X7zFaW+/tyJ2/OwPGjQopk6dGjfffHO8+OKLMX/+/GjduvUOxww7l52dHTNmzIinn346jj766Bg7dmy0aNEili1bFv369Yv58+fHmDFj4qWXXor58+dHzZo192nf7u48Y926dXHppZcW+8y8/vrrsXjx4mjSpElUrlw5Xnvttfj9738fdevWjaFDh0bbtm1j9erVu62f4na3r/b2uPwyv3v2NO+ECRPi5ZdfjuOPPz4efvjhaN68efzlL3+JiL0/zwQOPgItYJ99/PHHsWjRovjpT38ap5xySrRs2bLEf41r0aJFZvDkbb74+rjjjotFixZF06ZNd/jZFpywe02aNIkKFSpkAseIzwdl/8c//rHLefLz86N3797xq1/9KmbNmhUvv/xyvPHGG9GiRYvYunVrzJs3L9N2yZIlxfp+2y2D2/8FdPsB4rdv169fv5g0aVLccccdce+990ZEZK4OKiws3LcN/i909NFHR25ubqxYsWKH42TbGEFz5syJ448/Pi6//PI49thjo2nTpvvtypb/Vk2aNImcnJyYM2dOZtqWLVti7ty5cfTRR2emnXbaaVFQUJC5XcY4fyV33HHHxQcffBDly5ff4TO+bfy9WrVqFfveidjxuycnJ2evv1vmzJkT/fv3jzPOOCNat24dderUydwGxd7JysqKE044IUaMGBHz5s2LnJycmDp1asyZMycGDhwYp512WrRq1Spyc3Pj3//+d2a+li1bxnvvvVesP7cFECVx3HHHxYIFC3Z6DrHtd0358uWje/fuMXr06Pj73/8ey5cvj+eee2639bOjXe2rLx6XhYWF8eabb+71crfv961bt8bf/va3YrcM7q1jjz02rrvuunjppZfimGOOiYceeiginGdCmhlDC9hn1atXj5o1a8a9994bdevWjRUrVsSQIUNKtIwBAwZEly5d4rbbbovevXvHc889F08//XTmL6wREUOHDo3TTz89jjzyyPjf//3fKFeuXLz++uvx5ptvxk033bS/N+uQVKlSpbjwwgtj8ODBUbNmzahdu3Zcf/31uzxRmzhxYhQWFkanTp2iYsWKMWnSpMjPz48GDRpknlx0ySWXxPjx46NChQrxox/9KPLz8zP9lp+fH1/96lfjlltuiUaNGsWqVavipz/9abF1DB06NNq3bx+tWrWKTZs2xRNPPJE5Qa1du3bk5+fHtGnT4ogjjoi8vLyoWrXqgd1JKVe5cuUYNGhQXH311VFUVBQnnnhirFmzJubMmRNVqlSJfv36RbNmzeI3v/lNPPPMM9GoUaP47W9/G3Pnzs08VZKSKygoiMsuuywGDx4cNWrUiCOPPDJGjx4dGzZsiAsvvDDTLjs7O/r37x/XXXddNGvWbJe3TrFr3bt3j86dO0ffvn1j9OjR0bx583j//ffjySefjDPOOCM6dOgQJ598cvziF7+I3/zmN9G5c+eYNGlSvPnmm5kxkSI+H6/vlVdeieXLl0elSpWiRo0au1xns2bNYsqUKdG7d+/IysqKG264oURXGP+3e+WVV+LZZ5+Nr3/961G7du145ZVX4qOPPoqWLVtGs2bN4re//W106NAh1q5dG4MHD478/PzMvN27d4/mzZtHv3794he/+EWsXbs2rr/++hLX8OMf/zi++tWvxpVXXhkXXXRRFBQUxIIFC2LGjBlx5513xhNPPBHvvPNOdOnSJapXrx5PPfVUFBUVRYsWLXZbP8Xtbl8VFBTENddcE08++WQ0adIkbrvttli9evVeL/uuu+6KZs2aRcuWLeP222+PTz75pER/FFi2bFnce++98c1vfjPq1asXixYtisWLF8f5558fEc4zIdUSoMxt3LgxWbBgQbJx48ayLqXEZsyYkbRs2TLJzc1N2rRpk8yaNSuJiGTq1KnJsmXLkohI5s2bl2n/ySefJBGRPP/885lp9957b/I///M/SX5+ftK3b9/kpptuSurUqVNsPdOmTUuOP/74JD8/P6lSpUrSsWPH5N577828v22d7Nqnn36anHvuuUnFihWTww8/PBk9enTStWvX5Ic//GGSJEnSoEGD5Pbbb0+SJEmmTp2adOrUKalSpUpSUFCQfPWrX01mzpyZWdb777+fnHrqqUlubm7SoEGD5KGHHkpq166d3H333Zk2CxYsSDp37pzk5+cn7dq1S6ZPn16s72+88cakZcuWSX5+flKjRo2kT58+yTvvvJOZ/7777kvq16+flCtXLunateuB3j2pdPvttycNGjTIvC4qKkruuOOOpEWLFkmFChWSWrVqJT179kxeeOGFJEmS5LPPPkv69++fVK1aNalWrVpy2WWXJUOGDEnatm2bWUa/fv2SPn36lO6GpND2+2njxo3JgAEDksMOOyzJzc1NTjjhhOTVV1/dYZ6lS5cmEZGMHj26lKtNj+2/k7bp06dP0q9fvyRJkmTt2rXJgAEDknr16iUVKlRI6tevn3zve99LVqxYkWk/dOjQ5PDDD0+qVq2aXH311cmVV15Z7Dtk0aJFyVe/+tUkPz8/iYhk2bJlyfPPP59ERPLJJ58UW/eyZcuSr33ta0l+fn5Sv3795M4779yhxu2/OyluwYIFSc+ePZNatWolubm5SfPmzZOxY8cmSZIkr732WtKhQ4ckLy8vadasWfLII4/ssC8XLVqUnHjiiUlOTk7SvHnzZNq0acV+3+/tecarr76a9OjRI6lUqVJSUFCQtGnTJvnZz36WJEmSvPjii0nXrl2T6tWrJ/n5+UmbNm2Shx9+eI/1U9zu9tXmzZuTyy67LKlRo0ZSu3btZNSoUcWO6yTZ+XG0rX8feuihpGPHjklOTk5y9NFHJ88991ymza6O3WHDhmV+t33wwQdJ3759k7p16yY5OTlJgwYNkqFDhyaFhYWZ9ns6z/yiNJ+7w6EkK0k8dxbK2meffRbLli2LRo0auVc/Ii6++OJ4++2348UXXyzrUthL//znP6N+/foxc+bMzFMU4VB2zjnnRHZ2dkyaNGmv53nxxRfjlFNOiffeey8OP/zwA1gdQPotX748GjVqFPPmzYt27dqVdTnFOHeHg4NbDoEyd+utt0aPHj2ioKAgnn766fj1r38d48aNK+uy2I3nnnsu1q1bF61bt46VK1fGtddeGw0bNowuXbqUdWlwQG3dujX+8Y9/xMsvvxyXXnrpXs2zadOm+Oijj2L48OFx1llnCbMAAPYDo9wBZe7VV1+NHj16ROvWrePuu++OX/3qV3HRRReVdVnsxpYtW+InP/lJtGrVKs4444yoVatWzJo1a4enk8Gh5s0334wOHTpEq1at4gc/+MFezfP73/8+GjRoEKtXr47Ro0cf4AoBAP47uOUQDgIuWwYAgHRw7g4HB1doAQAAAJAqAi04iLhgEgAADm7O2eHgINCCg8C2cYc2bNhQxpUAAAC7s+2c3dihULY85RAOAtnZ2VGtWrVYtWpVRERUrFgxsrKyyrgqAABgmyRJYsOGDbFq1aqoVq1aZGdnl3VJ8F/NoPBwkEiSJD744INYvXp1WZcCAADsQrVq1aJOnTr+AA1lTKAFB5nCwsLYsmVLWZcBAAB8QYUKFVyZBQcJgRYAAAAAqWJQeAAAAABSRaAFAAAAQKoItAAAAABIFYEWAAAAAKki0AIAAAAgVQRaAAAAAKSKQAsAAACAVPl/iUVKTS5CycIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_text = \"I don't no fr y hes sooo sad.\"\n",
    "predictions = predict(sample_text, best_model, tokenizer, device, max_len=128)\n",
    "print(f\"Predicted emotions for '{sample_text}': {predictions}\")\n",
    "\n",
    "predictions_array = predictions.squeeze()  # Remove unnecessary dimensions\n",
    "\n",
    "\n",
    "emotion_moodtags = []\n",
    "for items in predictions_array:\n",
    "    emotion_moodtags.append(items)\n",
    "\n",
    "fig = px.line_polar(pd.DataFrame(dict(r=emotion_moodtags, theta=EMOTION_LABELS)), r='r', theta='theta', line_close=True)\n",
    "fig.show()\n",
    "\n",
    "# fig = px.line_polar(pd.DataFrame(dict(r=emotion_moodtags, theta=EMOTION_LABELS)), r='r', theta='theta', line_close=True)\n",
    "# fig.show()\n",
    "\n",
    "    \n",
    "# Since predictions are probabilistic values, normalize to ensure they sum up to 1\n",
    "normalized_predictions = predictions_array / predictions_array.sum()  # Normalize the values\n",
    "\n",
    "## Horizontal Stacked Bar Plot\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(15, 5))\n",
    "\n",
    "left = 0\n",
    "for i in range(len(normalized_predictions)):\n",
    "    ax.barh(0, normalized_predictions[i], color=plt.cm.tab10(i), left=left, label=EMOTION_LABELS[i])\n",
    "    left += normalized_predictions[i]\n",
    "\n",
    "# Add legend\n",
    "ax.set_xlim(0, 1)\n",
    "ax.set_yticks([])\n",
    "ax.set_xticks(np.arange(0, 1.1, 0.1))\n",
    "ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=len(EMOTION_LABELS))\n",
    "\n",
    "# Add title\n",
    "plt.title('Emotion Prediction Distribution')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "cc2c65f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:50.115903Z",
     "iopub.status.busy": "2025-03-02T20:21:50.115616Z",
     "iopub.status.idle": "2025-03-02T20:21:50.118681Z",
     "shell.execute_reply": "2025-03-02T20:21:50.117888Z"
    },
    "papermill": {
     "duration": 0.027741,
     "end_time": "2025-03-02T20:21:50.119937",
     "exception": false,
     "start_time": "2025-03-02T20:21:50.092196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "# sample_text = \"hey! hru, wanna ply valo toni8?\"\n",
    "# predictions = predict(sample_text, best_model, tokenizer, max_len=128, device=device)\n",
    "# print(f\"Predictions: {predictions}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "1f2d19de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:50.167461Z",
     "iopub.status.busy": "2025-03-02T20:21:50.167214Z",
     "iopub.status.idle": "2025-03-02T20:21:50.170156Z",
     "shell.execute_reply": "2025-03-02T20:21:50.169381Z"
    },
    "papermill": {
     "duration": 0.02774,
     "end_time": "2025-03-02T20:21:50.171327",
     "exception": false,
     "start_time": "2025-03-02T20:21:50.143587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n",
    "# sample_text = \"hey! hru, wanna ply valo toni8?\"\n",
    "# predictions = predict(sample_text, best_model, tokenizer, max_len=128, device=device)\n",
    "# print(f\"Predictions: {predictions}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "04d7f42c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-02T20:21:50.218539Z",
     "iopub.status.busy": "2025-03-02T20:21:50.218298Z",
     "iopub.status.idle": "2025-03-02T20:21:50.221254Z",
     "shell.execute_reply": "2025-03-02T20:21:50.220467Z"
    },
    "papermill": {
     "duration": 0.027514,
     "end_time": "2025-03-02T20:21:50.222398",
     "exception": false,
     "start_time": "2025-03-02T20:21:50.194884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sample_text = \"hey! hru, wanna ply valo toni8?\"\n",
    "# best_model = RoBERTaEmotionModel('roberta-base').to(device)\n",
    "# best_model.load_state_dict(torch.load(\"best_model.pth\"))  # Assuming best model is saved during training\n",
    "# predicted_emotions = predict_emotions(best_model, sample_text, tokenizer, best_params['max_len'], device)\n",
    "# print(predicted_emotions)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5557640,
     "sourceId": 10899138,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3977.41751,
   "end_time": "2025-03-02T20:21:53.795562",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-02T19:15:36.378052",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "06837a1358604248957f84ff735c16a4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "076a4af610fb4dc08033584c049ab834": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "138e4a5b96b04626a81555d8c217a677": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_14a2007906bf4b40afbd799ad14f40b2",
       "placeholder": "​",
       "style": "IPY_MODEL_393378b593ad40e58dc7019b38cefbd8",
       "tabbable": null,
       "tooltip": null,
       "value": " 52.0/52.0 [00:00&lt;00:00, 5.49kB/s]"
      }
     },
     "146de00de0aa43b9a0d834ee535b5cad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "14a2007906bf4b40afbd799ad14f40b2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "15aa80338b4243d5ac3f3058b24267a9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "23cab32d03194bdd9ea858f981745bb2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2d515f138c5349d5b56e752a4bdcc76e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "393378b593ad40e58dc7019b38cefbd8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3dc3d52965cb43ffa341f1a012672b84": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "42702b3375b3484b8b6863bebb867f17": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "485c8dd96d7748afa63c446917ac96da": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4b5d68faad044bca89bde0c3cabd82a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "526f2e71868649db8a7075ca7e5109a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_076a4af610fb4dc08033584c049ab834",
       "placeholder": "​",
       "style": "IPY_MODEL_8260f2cff77b4204b55867d825164822",
       "tabbable": null,
       "tooltip": null,
       "value": " 579/579 [00:00&lt;00:00, 56.8kB/s]"
      }
     },
     "52aeeb447f4b45ce94709544db329d52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e3d471a7d1a549db93233d0de1cd6d1c",
        "IPY_MODEL_bab8fab78219462ab00f79ff1ab15a83",
        "IPY_MODEL_138e4a5b96b04626a81555d8c217a677"
       ],
       "layout": "IPY_MODEL_8fd9a3001d5b4c1fb103d22d063cb847",
       "tabbable": null,
       "tooltip": null
      }
     },
     "58767f4eb1274944af631f1751d51367": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3dc3d52965cb43ffa341f1a012672b84",
       "placeholder": "​",
       "style": "IPY_MODEL_595991c1f8e34a2cbb0713f2a38fa964",
       "tabbable": null,
       "tooltip": null,
       "value": " 2.46M/2.46M [00:00&lt;00:00, 18.5MB/s]"
      }
     },
     "5934dad8d47348959b2e953e8489833c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "595991c1f8e34a2cbb0713f2a38fa964": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6cfb5b8ddb714742ab6b66699ab546e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9c7449a68bb94bf9a2b9b2a154fbf464",
       "max": 579.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a8ba20a5d89e40c2b10e6dd73520eb87",
       "tabbable": null,
       "tooltip": null,
       "value": 579.0
      }
     },
     "79503a453a8f409fb1ff9c81a2261dfd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7e456bbf318d46988462a5ce9c750988": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "811a4b08feb241c586d49f3881e1c52f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5934dad8d47348959b2e953e8489833c",
       "placeholder": "​",
       "style": "IPY_MODEL_2d515f138c5349d5b56e752a4bdcc76e",
       "tabbable": null,
       "tooltip": null,
       "value": "spm.model: 100%"
      }
     },
     "8260f2cff77b4204b55867d825164822": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "89173ddea97040adb3b18ba170d0d5fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8aedbea589f0405f87d2e2f724afc3d2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8bdc1ba5e24f4dbc8d53e25bea989bcc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e09f3baf33ee46e8a66cbdbc682764d9",
       "placeholder": "​",
       "style": "IPY_MODEL_a72a0761666448dab5aaa55cea5fe647",
       "tabbable": null,
       "tooltip": null,
       "value": "pytorch_model.bin: 100%"
      }
     },
     "8fd9a3001d5b4c1fb103d22d063cb847": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9a9a6e5e8b064fb6b6d53a00c36a5bf7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9c7449a68bb94bf9a2b9b2a154fbf464": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a4e7bdd6e0374617820150ec23fe9e3b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_06837a1358604248957f84ff735c16a4",
       "max": 2464616.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_485c8dd96d7748afa63c446917ac96da",
       "tabbable": null,
       "tooltip": null,
       "value": 2464616.0
      }
     },
     "a72a0761666448dab5aaa55cea5fe647": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a8ba20a5d89e40c2b10e6dd73520eb87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "abdd71b9d40741f2b6be0ff57f3c4bdf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_146de00de0aa43b9a0d834ee535b5cad",
       "placeholder": "​",
       "style": "IPY_MODEL_15aa80338b4243d5ac3f3058b24267a9",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "af8c2f3ebb76401cb00fe56ea350cecc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bab8fab78219462ab00f79ff1ab15a83": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c24b5564d8a24a258cd092679488433b",
       "max": 52.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4b5d68faad044bca89bde0c3cabd82a6",
       "tabbable": null,
       "tooltip": null,
       "value": 52.0
      }
     },
     "c24b5564d8a24a258cd092679488433b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cc472ef259d4413ba3b666797ee0e5e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_42702b3375b3484b8b6863bebb867f17",
       "placeholder": "​",
       "style": "IPY_MODEL_89173ddea97040adb3b18ba170d0d5fd",
       "tabbable": null,
       "tooltip": null,
       "value": " 371M/371M [00:02&lt;00:00, 179MB/s]"
      }
     },
     "d2e15431e0e24950b8faade3e332d68d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8aedbea589f0405f87d2e2f724afc3d2",
       "max": 371146213.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_23cab32d03194bdd9ea858f981745bb2",
       "tabbable": null,
       "tooltip": null,
       "value": 371146213.0
      }
     },
     "e09f3baf33ee46e8a66cbdbc682764d9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e10dc98ae7914d99889fa1c518cd6b89": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e3d471a7d1a549db93233d0de1cd6d1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e10dc98ae7914d99889fa1c518cd6b89",
       "placeholder": "​",
       "style": "IPY_MODEL_79503a453a8f409fb1ff9c81a2261dfd",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "e55a891e3b0047aeb87b6e902df9e4ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_abdd71b9d40741f2b6be0ff57f3c4bdf",
        "IPY_MODEL_6cfb5b8ddb714742ab6b66699ab546e4",
        "IPY_MODEL_526f2e71868649db8a7075ca7e5109a7"
       ],
       "layout": "IPY_MODEL_9a9a6e5e8b064fb6b6d53a00c36a5bf7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e7f4bb6d24174803997fe29cfe2c5f91": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8bdc1ba5e24f4dbc8d53e25bea989bcc",
        "IPY_MODEL_d2e15431e0e24950b8faade3e332d68d",
        "IPY_MODEL_cc472ef259d4413ba3b666797ee0e5e9"
       ],
       "layout": "IPY_MODEL_7e456bbf318d46988462a5ce9c750988",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f397b2dbc1d041c4805a82d61506edf1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_811a4b08feb241c586d49f3881e1c52f",
        "IPY_MODEL_a4e7bdd6e0374617820150ec23fe9e3b",
        "IPY_MODEL_58767f4eb1274944af631f1751d51367"
       ],
       "layout": "IPY_MODEL_af8c2f3ebb76401cb00fe56ea350cecc",
       "tabbable": null,
       "tooltip": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
